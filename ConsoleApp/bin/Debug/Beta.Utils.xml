<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Beta.Utils</name>
    </assembly>
    <members>
        <member name="T:Beta.Utils.AsyncLocal`1">
            <summary>
            一个假的AsyncLocal，只可用于同步环境（因为.net 4.6以下没有AsyncLocal，为代码兼容设立）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Beta.Utils.BaseConstants">
            <summary>
            基础类型的常量定义
            </summary>
            <summary>
            基础类型的常量定义
            </summary>
        </member>
        <member name="F:Beta.Utils.BaseConstants.DEFAULT_NUM">
            <summary>
            数值类型默认值
            </summary>
        </member>
        <member name="F:Beta.Utils.BaseConstants.DEFAULT_STRING">
            <summary>
            字符类型默认值
            </summary>
        </member>
        <member name="F:Beta.Utils.BaseConstants.DEFAULT_BOOL">
            <summary>
            Bool类型默认值
            </summary>
        </member>
        <member name="F:Beta.Utils.BaseConstants.DEFAULT_DATETIME">
            <summary>
            日期类型默认值
            </summary>
        </member>
        <member name="F:Beta.Utils.BaseConstants.DEFAULT_DATETIME2INT">
            <summary>
            日期类型Int默认值
            </summary>
        </member>
        <member name="F:Beta.Utils.BaseConstants.DEFAULT_MONTHINT">
            <summary>
            月份类型Int默认值(100001)
            </summary>
        </member>
        <member name="F:Beta.Utils.BaseConstants.DEFAULT_SHORTDATETIME_FORMAT">
            <summary>
            8位日期类型的默认格式(yyyyMMdd)
            </summary>
        </member>
        <member name="F:Beta.Utils.BaseConstants.DEFAULT_DATE_FORMAT">
            <summary>
            默认日期字符串格式(yyyy-MM-dd)
            </summary>
        </member>
        <member name="F:Beta.Utils.BaseConstants.DEFAULT_MONTH_FORMAT">
            <summary>
            默认月份字符串格式(yyyy-MM)
            </summary>
        </member>
        <member name="F:Beta.Utils.BaseConstants.DEFAULT_SHORTMONTH_FORMAT">
            <summary>
            默认短月份字符串格式(yyyyMM)
            </summary>
        </member>
        <member name="F:Beta.Utils.BaseConstants.DEFAULT_EMPTYJOSNRESULT">
            <summary>
            空Json对象的默认值，一般用于绑定Jcore的Datalist等数据展示控件
            </summary>
        </member>
        <member name="T:Beta.Utils.Caching.Cache">
            <summary>
            缓存管理类
            </summary>
        </member>
        <member name="E:Beta.Utils.Caching.Cache.OnCacheAdded">
            <summary>
            加入缓存对象回调函数
            </summary>
        </member>
        <member name="E:Beta.Utils.Caching.Cache.OnCacheRemoved">
            <summary>
            移除缓存对象回调函数
            </summary>
        </member>
        <member name="M:Beta.Utils.Caching.Cache.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Beta.Utils.Caching.Cache.GetCacheCheckInterval">
            <summary>
            获取缓存检测间隔
            </summary>
            <returns>时间间隔</returns>
        </member>
        <member name="M:Beta.Utils.Caching.Cache.GetIsEnableMemoryCheck">
            <summary>
            获得是否需要内存检测
            </summary>
            <returns>true | False</returns>
        </member>
        <member name="M:Beta.Utils.Caching.Cache.GetAvailableMemoryPctConfig">
            <summary>
            获取可用的内存配置极限值
            </summary>
            <returns>可用极限值</returns>
        </member>
        <member name="M:Beta.Utils.Caching.Cache.IsMemoryThresholdExceeded">
            <summary>
            判断内存是否是ThresholdExceeded的
            </summary>
            <returns>true | False</returns>
        </member>
        <member name="M:Beta.Utils.Caching.Cache._checkTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            时间间隔触发时间
            </summary>
            <param name="sender">对象</param>
            <param name="e">事件参数</param>
        </member>
        <member name="M:Beta.Utils.Caching.Cache.AddItem(Beta.Utils.Caching.CacheItem)">
            <summary>
            添加CacheItem
            </summary>
            <param name="item">缓存项</param>
        </member>
        <member name="M:Beta.Utils.Caching.Cache.Add(System.String,System.Object)">
            <summary>
            添加缓存对象
            缺省添加函数，根据距最后访问的时间间隔计算是否超时，缺省超时时间60分钟
            </summary>
            <param name="key">键值</param>
            <param name="value">缓存对象</param>
        </member>
        <member name="M:Beta.Utils.Caching.Cache.Add(System.String,System.Object,System.Int32)">
            <summary>
            添加缓存对象
            根据距最后访问时间间隔计算是否超时
            </summary>
            <param name="key">键值</param>
            <param name="value">缓存对象</param>
            <param name="timeToLive">距最后访问的时间间隔（分钟）</param>
        </member>
        <member name="M:Beta.Utils.Caching.Cache.Add(System.String,System.Object,System.DateTime)">
            <summary>
            添加缓存对象
            根据绝对时间点计算是否超时
            </summary>
            <param name="key">键值</param>
            <param name="value">缓存对象</param>
            <param name="expire">绝对时间点</param>
        </member>
        <member name="M:Beta.Utils.Caching.Cache.Add(System.String,System.Object,System.DateTime,Beta.Utils.Caching.CacheItemRemovedHandler)">
            <summary>
            添加缓存对象
            根据绝对时间点计算是否超时
            </summary>
            <param name="key">键值</param>
            <param name="value">缓存对象</param>
            <param name="expire">绝对时间点</param>
            <param name="onCacheItemRemoved">缓存对象被移除时的回调函数</param>
        </member>
        <member name="M:Beta.Utils.Caching.Cache.Add(System.String,System.Object,Beta.Utils.Caching.IDependency)">
            <summary>
            添加缓存对象
            根据依赖对象计算是否超时
            </summary>
            <param name="key">键值</param>
            <param name="value">缓存对象</param>
            <param name="dependency">依赖对象</param>
        </member>
        <member name="M:Beta.Utils.Caching.Cache.Add(System.String,System.Object,Beta.Utils.Caching.IDependency,Beta.Utils.Caching.CacheItemRemovedHandler)">
            <summary>
            添加缓存对象
            根据依赖对象计算是否超时
            </summary>
            <param name="key">键值</param>
            <param name="value">缓存对象</param>
            <param name="dependency">依赖对象</param>
            <param name="onCacheItemRemoved">缓存对象被移除时的回调函数</param>
        </member>
        <member name="M:Beta.Utils.Caching.Cache.Remove(System.String)">
            <summary>
            从缓存中清除一个缓存对象
            </summary>
            <param name="key">缓存对象键值</param>
        </member>
        <member name="P:Beta.Utils.Caching.Cache.Count">
            <summary>
            缓存对象总数
            </summary>
        </member>
        <member name="P:Beta.Utils.Caching.Cache.Item(System.String)">
            <summary>
            获取一个缓存的对象
            </summary>
            <param name="key">键值</param>
            <returns>缓存的对象</returns>
        </member>
        <member name="T:Beta.Utils.Caching.CacheExpireModeEnum">
            <summary>
            缓存对象超时模式枚举
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.CacheExpireModeEnum.IntervalAfterLastAccess">
            <summary>
            最后访问时间
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.CacheExpireModeEnum.AbsoluteTimePoint">
            <summary>
            绝对时点
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.CacheExpireModeEnum.Never">
            <summary>
            永不超时
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.CacheExpireModeEnum.Depend">
            <summary>
            依赖于其他对象
            </summary>
        </member>
        <member name="T:Beta.Utils.Caching.CacheItemRemovedHandler">
            <summary>
            缓存对象被移除时的代理
            由缓存加载类提供，主要用于在该缓存对象被删除时重新加载该对象
            </summary>
            <param name="key">键值</param>
            <param name="value">缓存的对象，如果此代理负责重新加载该对象，这把新加载的对象赋予此参数，否则赋予此参数为NULL</param>
            <param name="cache">当前缓存对象</param>
            <param name="reason">缓存过期原因</param>
        </member>
        <member name="T:Beta.Utils.Caching.CacheRemoveHandler">
            <summary>
            缓存对象被移除时的代理
            由缓存管理类提供，主要用于记录日志信息
            </summary>
            <param name="key">键值</param>
        </member>
        <member name="T:Beta.Utils.Caching.CacheAddedHandler">
            <summary>
            缓存对象被加入时的代理
            由缓存管理类提供，主要用于记录日志
            </summary>
            <param name="key">键值</param>
        </member>
        <member name="T:Beta.Utils.Caching.CacheItem">
            <summary>
            缓存项处理类
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.CacheItem.OnCacheItemRemoved">
            <summary>
            缓存移除后的事件
            </summary>
        </member>
        <member name="M:Beta.Utils.Caching.CacheItem.#ctor(System.String,System.Object,System.Int32)">
            <summary>
            时间间隔类构造函数
            </summary>
            <param name="key">键值</param>
            <param name="value">缓存的对象</param>
            <param name="timeToLive">距最后一次访问的时间间隔（分钟）</param>
        </member>
        <member name="M:Beta.Utils.Caching.CacheItem.#ctor(System.String,System.Object,System.Int32,Beta.Utils.Caching.CacheItemRemovedHandler)">
            <summary>
            时间间隔类构造函数
            </summary>
            <param name="key">键值</param>
            <param name="value">缓存的对象</param>
            <param name="timeToLive">距最后一次访问的时间间隔（分钟）</param>
            <param name="onCacheItemRemoved">对象被从缓存中移除时的回调函数</param>
        </member>
        <member name="M:Beta.Utils.Caching.CacheItem.#ctor(System.String,System.Object,System.DateTime)">
            <summary>
            绝对时间点超时类构造函数
            </summary>
            <param name="key">键值</param>
            <param name="value">缓存的对象</param>
            <param name="expire">绝对时间点</param>
        </member>
        <member name="M:Beta.Utils.Caching.CacheItem.#ctor(System.String,System.Object,System.DateTime,Beta.Utils.Caching.CacheItemRemovedHandler)">
            <summary>
            绝对时间点超时类构造函数
            </summary>
            <param name="key">键值</param>
            <param name="value">缓存的对象</param>
            <param name="expire">绝对时间点</param>
            <param name="onCacheItemRemoved">对象被从缓存中移除时的回调函数</param>
        </member>
        <member name="M:Beta.Utils.Caching.CacheItem.#ctor(System.String,System.Object,Beta.Utils.Caching.IDependency)">
            <summary>
            依赖于外部对象类构造函数
            </summary>
            <param name="key">键值</param>
            <param name="value">缓存的对象</param>
            <param name="dependency">依赖对象</param>
        </member>
        <member name="M:Beta.Utils.Caching.CacheItem.#ctor(System.String,System.Object,Beta.Utils.Caching.IDependency,Beta.Utils.Caching.CacheItemRemovedHandler)">
            <summary>
            依赖于外部对象类构造函数
            </summary>
            <param name="key">键值</param>
            <param name="value">缓存的对象</param>
            <param name="dependency">依赖对象</param>
            <param name="onCacheItemRemoved">对象被从缓存中移除时的回调函数</param>
        </member>
        <member name="P:Beta.Utils.Caching.CacheItem.Key">
            <summary>
            键值
            </summary>
        </member>
        <member name="P:Beta.Utils.Caching.CacheItem.Value">
            <summary>
            缓存对象
            </summary>
        </member>
        <member name="P:Beta.Utils.Caching.CacheItem.ExpireMode">
            <summary>
            超时模式
            </summary>
        </member>
        <member name="P:Beta.Utils.Caching.CacheItem.TimeOut">
            <summary>
            是否超时
            </summary>
        </member>
        <member name="T:Beta.Utils.Caching.IDependency">
            <summary>
            依赖关系接口
            </summary>
        </member>
        <member name="M:Beta.Utils.Caching.IDependency.ConditionMatched">
            <summary>
            依赖对象是否满足了一定的条件
            </summary>
            <returns>true | false</returns>
        </member>
        <member name="T:Beta.Utils.Caching.CpuInfo">
            <summary>
            CPU信息结构定义
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.CpuInfo.dwOemId">
            <summary>
            OEM ID
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.CpuInfo.dwPageSize">
            <summary>
            页面大小
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.CpuInfo.lpMinimumApplicationAddress">
            <summary>
            lpMinimumApplicationAddress
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.CpuInfo.lpMaximumApplicationAddress">
            <summary>
            lpMaximumApplicationAddress
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.CpuInfo.dwActiveProcessorMask">
            <summary>
            dwActiveProcessorMask
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.CpuInfo.dwNumberOfProcessors">
            <summary>
            CPU个数
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.CpuInfo.dwProcessorType">
            <summary>
            CPU类型
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.CpuInfo.dwAllocationGranularity">
            <summary>
            dwAllocationGranularity
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.CpuInfo.dwProcessorLevel">
            <summary>
            CPU等级
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.CpuInfo.dwProcessorRevision">
            <summary>
            dwProcessorRevision
            </summary>
        </member>
        <member name="T:Beta.Utils.Caching.MemoryInfo">
            <summary>
            内存信息结构定义
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.MemoryInfo.dwLength">
            <summary>
            dwLength
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.MemoryInfo.dwMemoryLoad">
            <summary>
            已经使用的内存
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.MemoryInfo.dwTotalPhys">
            <summary>
            总物理内存大小
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.MemoryInfo.dwAvailPhys">
            <summary>
            可用物理内存大小
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.MemoryInfo.dwTotalPageFile">
            <summary>
            交换文件总大小
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.MemoryInfo.dwAvailPageFile">
            <summary>
            可用交换文件大小
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.MemoryInfo.dwTotalVirtual">
            <summary>
            总虚拟内存大小
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.MemoryInfo.dwAvailVirtual">
            <summary>
            可用虚拟内存大小
            </summary>
        </member>
        <member name="T:Beta.Utils.Caching.SystemTimeInfo">
            <summary>
            系统时间结构定义
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.SystemTimeInfo.wYear">
            <summary>
            年
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.SystemTimeInfo.wMonth">
            <summary>
            月
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.SystemTimeInfo.wDayOfWeek">
            <summary>
            星期
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.SystemTimeInfo.wDay">
            <summary>
            天
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.SystemTimeInfo.wHour">
            <summary>
            小时
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.SystemTimeInfo.wMinute">
            <summary>
            分钟
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.SystemTimeInfo.wSecond">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:Beta.Utils.Caching.SystemTimeInfo.wMilliseconds">
            <summary>
            毫秒
            </summary>
        </member>
        <member name="T:Beta.Utils.Caching.SystemInfo">
            <summary>
            系统信息帮助类
            </summary>
        </member>
        <member name="M:Beta.Utils.Caching.SystemInfo.GetWinDirectory">
            <summary>
            获取Windows目录
            </summary>
            <returns>Windows目录</returns>
        </member>
        <member name="M:Beta.Utils.Caching.SystemInfo.GetSysDirectory">
            <summary>
            获取系统目录
            </summary>
            <returns>系统目录</returns>
        </member>
        <member name="M:Beta.Utils.Caching.SystemInfo.GetCpuInfo">
            <summary>
            获取CPU信息
            </summary>
            <returns>CPU信息</returns>
        </member>
        <member name="M:Beta.Utils.Caching.SystemInfo.GetMemoryInfo">
            <summary>
            获取系统内存信息
            </summary>
            <returns>系统内存信息</returns>
        </member>
        <member name="M:Beta.Utils.Caching.SystemInfo.GetSystemTimeInfo">
            <summary>
            获取系统时间信息
            </summary>
            <returns>系统时间信息</returns>
        </member>
        <member name="M:Beta.Utils.Caching.SystemInfo.GetOperationSystemInName">
            <summary>
            获取系统名称
            </summary>
            <returns>系统名称</returns>
        </member>
        <member name="T:Beta.Utils.ColorFactory">
            <summary>
            画图的颜色配置
            </summary>
        </member>
        <member name="M:Beta.Utils.ColorFactory.CreateColor(System.Int32,System.Int32)">
            <summary>
            获取指定颜色
            </summary>
            <param name="colorCount">总颜色数</param>
            <param name="colorIndex">颜色索引，从0开始，必须小于总颜色数</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ColorFactory.InitCostomColor(System.String)">
            <summary>
            设置自定义预置颜色
            </summary>
            <param name="colors">颜色字符串，如：“0x1941a5,...,0xafd8f8”</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ColorFactory.InitCostomColor(System.String,System.String)">
            <summary>
            设置自定义预置颜色
            </summary>
            <param name="key">颜色序列的key</param>
            <param name="colors">颜色字符串，如：“0x1941a5,...,0xafd8f8”</param>
        </member>
        <member name="T:Beta.Utils.CompressionHelper">
            <summary>
            压缩帮助类
            </summary>
        </member>
        <member name="M:Beta.Utils.CompressionHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Beta.Utils.CompressionHelper.Compress(System.IO.Stream)">
            <summary>
            压缩
            </summary>
            <param name="inputStream">输入流</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Beta.Utils.CompressionHelper.Compress(System.Byte[])">
            <summary>
            压缩
            </summary>
            <param name="inputBuffer">输入字节</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Beta.Utils.CompressionHelper.Decompress(System.IO.Stream)">
            <summary>
            解压缩
            </summary>
            <param name="inputStream">输入流</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Beta.Utils.CompressionHelper.Decompress(System.Byte[])">
            <summary>
            解压缩
            </summary>
            <param name="inputBuffer">输入字节数组</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Beta.Utils.CompressionHelper.ExistsWinRAR">
            <summary>
            是否安装了Winrar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.CompressionHelper.CompressRAR(System.String,System.String,System.String)">
            <summary>
            打包成Rar
            </summary>
            <param name="patch"></param>
            <param name="rarPatch"></param>
            <param name="rarName"></param>
        </member>
        <member name="M:Beta.Utils.CompressionHelper.UnCompressRAR(System.String,System.String,System.String)">
            <summary>
            解压
            </summary>
            <param name="unRarPatch"></param>
            <param name="rarPatch"></param>
            <param name="rarName"></param>
            <returns></returns>
        </member>
        <member name="T:Beta.Utils.Config.ConfigCenter">
            <summary>
            中心配置（来自配置管理中心，如consul）
            </summary>
            <summary>
            中心配置（来自配置管理中心，如consul）
            此类framework 4.0和framework 4.5环境实现可能不一致，主要差别在异步使用
            </summary>
        </member>
        <member name="P:Beta.Utils.Config.ConfigCenter.LocalCache">
            <summary>
            是否启用本地文件缓存
            </summary>
        </member>
        <member name="F:Beta.Utils.Config.ConfigCenter._serviceConfig">
            <summary>
            服务设置
            </summary>
        </member>
        <member name="F:Beta.Utils.Config.ConfigCenter._globalConfig">
            <summary>
            全局设置
            </summary>
        </member>
        <member name="F:Beta.Utils.Config.ConfigCenter._mergeConfig">
            <summary>
            合并的配置
            </summary>
        </member>
        <member name="M:Beta.Utils.Config.ConfigCenter.Merge(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            合并一个字典（特殊合并，会合并Value中的JObject），用于Global和Service配置合并场景
            </summary>
        </member>
        <member name="P:Beta.Utils.Config.ConfigCenter.Item(System.String)">
            <summary>
            取一个设置值
            </summary>
            <param name="key"></param>
            <returns>类型为JObject，可直接强转为对应值类型</returns>
        </member>
        <member name="M:Beta.Utils.Config.ConfigCenter.Get``1(System.String,``0)">
            <summary>
            <para>取一个设置值，不抛异常，如果未配置，返回_default的值</para>
            <para>内置类型转换，T为值类型时，性能约800万QPS</para>
            <para>支持自定义类型和匿名类型，性能降低不可用于高频调用</para>
            <para>e.g：</para>
            <para>var config = Get("key",new{A="1",B=2});</para>
            <para>int port = Get&lt;dynamic&gt;("key").port;</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="_default"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.Consul.ConsulAPI.SetConsistencyDefault">
            <summary>
            设置可用模式为默认的
            </summary>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.Consul.ConsulAPI.SetConsistencyConsistent">
            <summary>
            设置可用模式为强一致的
            </summary>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.Consul.ConsulAPI.SetConsistencyStale">
            <summary>
            设置可用模式为陈腐的/高可用的
            </summary>
            <returns></returns>
        </member>
        <member name="F:Beta.Utils.Consul.KV.ConsulApiUrl">
            <summary>
            默认的Consul Http接口地址
            </summary>
        </member>
        <member name="M:Beta.Utils.Consul.KV.QueryByKey(System.String,System.String,System.Int32)">
            <summary>
            单个Key-Value查询
            </summary>
            <param name="host"></param>
            <param name="key"></param>
            <param name="requestIndex">X-Consul-Index</param>
            <returns> Key=X-Consul-Index，Value为存储的值 </returns>
        </member>
        <member name="M:Beta.Utils.Consul.KV.QueryByKey(System.String,System.Int32)">
            <summary>
            单个Key查询
            </summary>
            <param name="key"></param>
            <param name="requestIndex">X-Consul-Index</param>
            <returns> Key=X-Consul-Index，Value为存储的值 </returns>
        </member>
        <member name="M:Beta.Utils.Consul.KV.QueryByPath(System.String,System.String)">
            <summary>
            目录递归查询
            </summary>
            <param name="host"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.Consul.KV.QueryByPath(System.String)">
            <summary>
            目前递归查询
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Beta.Utils.Consul.ConsulKVItem">
            <summary>
            Consul返回的对象（包含X-Consul-Index）
            </summary>
        </member>
        <member name="P:Beta.Utils.Consul.ConsulKVItem.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Beta.Utils.Consul.ConsulKVItem.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Beta.Utils.Consul.ConsulKVItem.ModifyIndex">
            <summary>
            即X-Consul-Index
            </summary>
        </member>
        <member name="M:Beta.Utils.CookieHelper.ClearCookie(System.String)">
            <summary>  
            清除指定Cookie  
            </summary>  
            <param name="cookieName">cookiename</param>  
        </member>
        <member name="M:Beta.Utils.CookieHelper.ClearCookie">
            <summary>
            清除所有Cookie
            </summary>
        </member>
        <member name="M:Beta.Utils.CookieHelper.GetCookieValue(System.String)">
            <summary>  
            获取指定Cookie值  
            </summary>  
            <param name="cookieName">cookiename</param>  
            <param name="encryptMode">encryptMode，0:不加密,1:兼容模式,2:加密，默认跟配置文件保持一致</param>
            <returns></returns>  
        </member>
        <member name="M:Beta.Utils.CookieHelper.GetCookieEx(System.String,System.Nullable{System.Byte})">
            <summary>  
            获取指定Cookie值  
            </summary>  
            <param name="cookieName">cookiename</param>  
            <param name="encryptMode">encryptMode，0:不加密,1:兼容模式,2:加密，默认跟配置文件保持一致</param>
            <returns></returns>  
        </member>
        <member name="M:Beta.Utils.CookieHelper.SetCookie(System.String,System.String)">
            <summary>  
            添加一个Cookie（24小时过期）  
            </summary>  
            <param name="cookiename"></param>  
            <param name="cookievalue"></param>  
        </member>
        <member name="M:Beta.Utils.CookieHelper.SetCookie(System.String,System.String,System.DateTime,System.String)">
            <summary>  
            添加一个Cookie  
            </summary>  
            <param name="cookieName">cookie名</param>  
            <param name="cookieValue">cookie值</param>  
            <param name="expires">过期时间 DateTime</param>
            <param name="path">Path</param>
        </member>
        <member name="M:Beta.Utils.CookieHelper.SetCookieEx(System.String,System.String,System.Nullable{System.DateTime},System.String,System.Nullable{System.Byte})">
            <summary>  
            添加一个Cookie  
            </summary>  
            <param name="cookieName">cookie名</param>  
            <param name="cookieValue">cookie值</param>  
            <param name="expires">过期时间 DateTime</param>
            <param name="path">Path</param>
            <param name="encryptMode">encryptMode，0:不加密,1:兼容模式,2:加密，默认跟配置文件保持一致</param>
        </member>
        <member name="M:Beta.Utils.CookieHelper.SetCookieEx(System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.Nullable{System.Byte})">
            <summary>  
            添加一个Cookie  
            </summary>  
            <param name="cookieName">cookie名</param>  
            <param name="cookieValue">cookie值</param>  
            <param name="expires">过期时间 DateTime</param>
            <param name="path">Path</param>
            <param name="encryptMode">encryptMode，0:不加密,1:兼容模式,2:加密，默认跟配置文件保持一致</param>
        </member>
        <member name="T:Beta.Utils.DataAccess.IDBHelper">
            <summary>
            数据库处理方法接口，定义公共事务和方法
            </summary>
        </member>
        <member name="P:Beta.Utils.DataAccess.IDBHelper.CommandTimeout">
            <summary>
            commandTimeout
            </summary>
        </member>
        <member name="P:Beta.Utils.DataAccess.IDBHelper.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:Beta.Utils.DataAccess.IDBHelper.CurrentDatabaseType">
            <summary>
            获取数据库类别
            </summary>
            <returns>数据库类型</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.GetSeparatedConnection">
            <summary>
            获取读写分离的连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.ExcuteDataSet(System.String)">
            <summary>
            根据sql或存储过程查询，返回DataSet
            </summary>
            <param name="cmdText">sql语句或存储过程</param>
            <returns>DataSet数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.ExcuteDataSet(System.String,System.Collections.Hashtable)">
            <summary>
            根据sql查询，返回DataSet
            </summary>
            <param name="procname">存储过程名</param>
            <param name="commandParameters">参数列表</param>
            <returns>DataSet数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.ExcuteDataSet(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            查询
            </summary>
            <param name="cmdText">SQL语句或者存储过程</param>
            <param name="cmdType">语句的类型</param>
            <param name="param">数据参数</param>
            <returns>表格数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.ExcuteDataTable(System.String)">
            <summary>
            执行无参数存储过程或SQL，返回DataTable
            </summary>
            <param name="cmdText">sql语句或存储过程</param>
            <returns>DataTable数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.ExcuteDataTable(System.String,System.Collections.Hashtable)">
            <summary>
            执行存储过程，返回DataTable
            </summary>
            <param name="procname">存储过程名</param>
            <param name="pars">参数列表</param>
            <returns>DataTable数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.ExcuteDataTable(System.String,System.Collections.Hashtable,System.String)">
            <summary>
            执行存储过程，返回DataTable
            </summary>
            <param name="procname">存储过程名</param>
            <param name="pars">参数列表</param>
            <param name="rtnParName">返回参数</param>
            <returns>DataTable数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.ExcuteDataTable(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            查询
            </summary>
            <param name="cmdText">SQL语句或者存储过程</param>
            <param name="cmdType">语句的类型</param>
            <param name="param">数据参数</param>
            <returns>表格数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.ExcuteDataReader(System.String)">
            <summary>
            执行无参数存储过程或SQL，返回DataReader
            </summary>
            <param name="cmdText">sql语句或存储过程</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.ExcuteDataReader(System.String,System.Collections.Hashtable)">
            <summary>
            执行存储过程，返回DataReader
            </summary>
            <param name="procname">存储过程名</param>
            <param name="pars">参数列表</param>
            <returns>DbDataReader数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.ExcuteDataReader(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            执行带参数存储过程或SQL，返回DataReader
            </summary>
            <param name="cmdText">SQL语句或者存储过程</param>
            <param name="cmdType">语句的类型</param>
            <param name="param">数据参数</param>
            <returns>DbDataReader数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.ExecNonQuery(System.String)">
            <summary>
            执行无参数存储过程或SQL
            </summary>
            <param name="cmdText">sql语句或存储过程</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.ExecNonQuery(System.String,System.Collections.Hashtable)">
            <summary>
            执行存储过程，返回受影响的记录数
            </summary>
            <param name="procname">存储过程名</param>
            <param name="pars">参数列表</param>
            <returns>受影响的记录数</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.ExecNonQuery(System.String,System.Collections.Hashtable,System.Boolean)">
            <summary>
            如果isHasReturnVal为true，则返回ID，否则返回受影响的记录数
            </summary>
            <param name="procname">存储过程名</param>
            <param name="pars">参数列表</param>
            <param name="isHasReturnVal">是否返回ID</param>
            <returns>如果isHasReturnVal为true，则返回ID，否则返回受影响的记录数</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.ExecNonQuery(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            查询
            </summary>
            <param name="cmdText">SQL语句或者存储过程</param>
            <param name="cmdType">语句的类型</param>
            <param name="param">数据参数</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.RunProcedureTran(System.Collections.Hashtable)">
            <summary>
            执行多个存储过程，实现数据库事务
             SqlParameter[] pare = new SqlParameter[2];
               pare[0] = new SqlParameter("@PageSize", SqlDbType.Int);
               pare[0].Value = 30;
               pare[1] = new SqlParameter("@PageIndex",SqlDbType.Int);
               pare[1].Value=1;            
               SqlParameter[] pare2 = new SqlParameter[1];
               pare2[0] = new SqlParameter("@CustomerID", SqlDbType.NChar);
               pare2[0].Value = "aaa";
               hsh.Add(pare, "usp_GetCustomers");
               hsh.Add(pare2, "WebFrameworkSample_Customers_GetOne");
               bool Re = idb.RunProcedureTran(hsh);
            </summary>
            <param name="ProcList">存储过程列表</param>
            <returns>bool执行多个存储过程成功或失败</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.CommitTransaction">
            <summary>
            提交事务,页面需要设置《%@ Page Transaction="Required"%》
            </summary>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.RollBackTransaction">
            <summary>
            回滚事务,页面需要设置《%@ Page Transaction="Required"%》
            </summary>
        </member>
        <member name="M:Beta.Utils.DataAccess.IDBHelper.Dispose">
            <summary>
            Dispose释放资源
            </summary>
        </member>
        <member name="T:Beta.Utils.DataAccess.DatabaseType">
            <summary>
            提供的数据库类型
            </summary>
        </member>
        <member name="T:Beta.Utils.DataAccess.DBFactoryHelper">
            <summary>
            数据访问工厂
            </summary>
        </member>
        <member name="M:Beta.Utils.DataAccess.DBFactoryHelper.GetDatabase(Beta.Utils.DataAccess.DatabaseType,System.String)">
            <summary>
            工厂：配置数据库插件
            </summary>
            <param name="dataType">数据库类型</param>
            <param name="connectionString">数据库连接字符串</param>
            <returns>IDBHelper，工厂接口</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.DBFactoryHelper.GetDatabase(Beta.Utils.DataAccess.DatabaseType,System.String,System.String[])">
            <summary>
            工厂：配置数据库插件
            </summary>
            <param name="dataType">数据库类型</param>
            <param name="masterConnString">主节点连接</param>
            <param name="followerConnStrings">从节点连接</param>
            <returns>IDBHelper，工厂接口</returns>
        </member>
        <member name="T:Beta.Utils.DataAccess.OracleDB">
            <summary>
            Oracle处理类
            </summary>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接字符串</param>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.GetConnection">
            <summary>
            数据连接对象
            </summary>
            <returns>OracleConnection数据连接对象</returns>
        </member>
        <member name="P:Beta.Utils.DataAccess.OracleDB.ConnectionString">
            <summary>
            数据库连接字符串属性
            </summary>
        </member>
        <member name="P:Beta.Utils.DataAccess.OracleDB.CommandTimeout">
            <summary>
            CommandTimeout
            </summary>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.Finalize">
            <summary>
            析构函数，释放资源
            </summary>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="isDispose">是否Dispose</param>
        </member>
        <member name="P:Beta.Utils.DataAccess.OracleDB.CurrentDatabaseType">
            <summary>
            数据库类型
            </summary>
            <returns>数据库类型</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.Pretreatment(System.String)">
            <summary>
            处理拼接SQL
            </summary>
            <param name="SqlText">参数列表</param>
            <returns>格式化后的string</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.Pretreatment(System.String,System.Collections.Hashtable)">
            <summary>
            处理接拼参数
            </summary>
            <param name="SqlText">SQL参数</param>
            <param name="pars">参数列表</param>
            <returns>string参数</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.ReplaceParameters(System.String)">
            <summary>
            处理参数
            </summary>
            <param name="sql">sql</param>
            <returns>格式化string</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.Process(System.String,System.Collections.Hashtable,System.String,System.Data.OracleClient.OracleDataAdapter)">
            <summary>
            参数处理
            </summary>
            <param name="rtnParName">返回参数</param>
            <param name="pars">参数列表</param>
            <param name="procname">存储过程名</param>
            <param name="adapter">adapter</param>
            <returns>DataSet数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.ExcuteDataSet(System.String)">
            <summary>
            根据SQL语句返回DataSet
            </summary>
            <param name="cmdText">sql语句</param>
            <returns>DataSet数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.ExcuteDataSet(System.String,System.Collections.Hashtable)">
            <summary>
            根据sql返回DataSet
            </summary>
            <param name="procName">存储过程名</param>
            <param name="pars">参数</param>
            <returns>DataSet数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.ExcuteDataSet(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            查询
            </summary>
            <param name="cmdText">SQL语句或者存储过程</param>
            <param name="cmdType">语句的类型</param>
            <param name="param">数据参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.ExcuteDataTable(System.String)">
            <summary>
            执行存储过程,返回DataView
            </summary>
            <param name="cmdText">sql语句或存储过程</param>
            <returns>DataTable数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.ExcuteDataTable(System.String,System.Collections.Hashtable)">
            <summary>
            执行存储过程,返回DataView
            </summary>
            <param name="sqlText">存储过程名</param>
            <param name="pars">参数列表</param>
            <returns>DataTable数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.ExcuteDataTable(System.String,System.Collections.Hashtable,System.String)">
            <summary>
            执行存储过程,返回DataView
            </summary>
            <param name="procname">存储过程名</param>
            <param name="pars">参数列表</param>
            <param name="rtnParName">返回参数</param>
            <returns>DataTable数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.ExcuteDataTable(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            查询
            </summary>
            <param name="cmdText">SQL语句或者存储过程</param>
            <param name="cmdType">语句的类型</param>
            <param name="param">数据参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.ExcuteDataReader(System.String)">
            <summary>
            执行无参数存储过程或SQL，返回DataReader
            </summary>
            <param name="cmdText">sql语句或存储过程</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.ExcuteDataReader(System.String,System.Collections.Hashtable)">
            <summary>
            执行存储过程，返回DataReader
            </summary>
            <param name="procName">存储过程名</param>
            <param name="pars">参数列表</param>
            <returns>DbDataReader数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.ExcuteDataReader(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            执行带参数存储过程或SQL，返回DataReader
            </summary>
            <param name="cmdText">SQL语句或者存储过程</param>
            <param name="cmdType">语句的类型</param>
            <param name="param">数据参数</param>
            <returns>DbDataReader数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.ExecNonQuery(System.String)">
            <summary>
            执行无参数存储过程或SQL
            </summary>
            <param name="cmdText">sql语句或存储过程</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.ExecNonQuery(System.String,System.Collections.Hashtable)">
            <summary>
            执行存储过程
            </summary>
            <param name="procname">存储过程名</param>
            <param name="pars">参数列表</param>
            <returns>受影响的记录数</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.ExecNonQuery(System.String,System.Collections.Hashtable,System.Boolean)">
            <summary>
            如果isHasReturnVal为true，则返回ID，否则返回受影响的记录数
            </summary>
            <param name="procname">存储过程名</param>
            <param name="pars">参数列表</param>
            <param name="isHasReturnVal">是否返回ID</param>
            <returns>如果isHasReturnVal为true，则返回ID，否则返回受影响的记录数</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.ExecNonQuery(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            查询
            </summary>
            <param name="cmdText">SQL语句或者存储过程</param>
            <param name="cmdType">语句的类型</param>
            <param name="param">数据参数</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.RunProcedureTran(System.Collections.Hashtable)">
            <summary>
            执行多个存储过程，实现数据库事务
            </summary>
            <param name="procList">存储过程的哈希表（value为存储过程语句，key是该语句的DbParameter[]）</param>
            <returns>bool执行多个存储过程成功或失败</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.CommitTransaction">
            <summary>
            提交事务,页面需要设置《%@ Page Transaction="Required"%》
            </summary>
        </member>
        <member name="M:Beta.Utils.DataAccess.OracleDB.RollBackTransaction">
            <summary>
            回滚事务,页面需要设置《%@ Page Transaction="Required"%》
            </summary>
        </member>
        <member name="T:Beta.Utils.DataAccess.SqlConnectionManager">
            <summary>
            读写分离连接管理器
            </summary>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlConnectionManager.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},Beta.Utils.DataAccess.SqlRouteEnum)">
            <summary>
            
            </summary>
            <param name="MasterConnStr">主字节点连串</param>
            <param name="followerConnStr">只读字点连接串</param>
            <param name="defaultRoute">无法判断是否只读时，默认走此配置</param>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlConnectionManager.GetConnectionString(System.Data.CommandType,System.String)">
            <summary>
            获取连接字符串（自动判断读写）
            </summary>
            <param name="cmdType"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlConnectionManager.GetSeparatedConnection">
            <summary>
            
            <para>获取自动读写分离的连接</para>
            <para>使用：using(var conn= helper.GetSeparatedConnection())...</para>
            <para>var cmd=conn.CreateCommand() //不可直接new SqlCommand(conn)</para>
            <para>支持dapper</para>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Beta.Utils.DataAccess.SqlContext">
            <summary>
            <para>SQL执行上下文，用于指定读写分离选项</para>
            <para>用法 using(var context=new SqlContext())...SqlHelper.Exec...</para>
            <para>.net 4.6以下时，只可用于同步环境，using内不可嵌异步方法</para>
            </summary>
        </member>
        <member name="P:Beta.Utils.DataAccess.SqlContext.Route">
            <summary>
            当前实例中的值
            </summary>
        </member>
        <member name="P:Beta.Utils.DataAccess.SqlContext.Current">
            <summary>
            当前执行上下文中的当前值
            </summary>
        </member>
        <member name="T:Beta.Utils.DataAccess.SqlRouteEnum">
            <summary>
            Sql路由选项
            </summary>
        </member>
        <member name="F:Beta.Utils.DataAccess.SqlRouteEnum.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Beta.Utils.DataAccess.SqlRouteEnum.Follower">
            <summary>
            走从节点
            </summary>
        </member>
        <member name="F:Beta.Utils.DataAccess.SqlRouteEnum.Mix">
            <summary>
            随机走主从节点
            </summary>
        </member>
        <member name="F:Beta.Utils.DataAccess.SqlRouteEnum.Master">
            <summary>
            指定走主节点
            </summary>
        </member>
        <member name="T:Beta.Utils.DataAccess.SqlDB">
            <summary>
            Sql Server 事务集合
            扩展原来的通用数据访问组件 Wind.Data.SqlAccess;
            </summary>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接字符串</param>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.GetSeparatedConnection">
            <summary>
            
            <para>获取自动读写分离的连接</para>
            <para>使用：using(var conn= helper.GetSeparatedConnection())...</para>
            <para>var cmd=conn.CreateCommand() //不可直接new SqlCommand(conn)</para>
            <para>支持dapper</para>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Beta.Utils.DataAccess.SqlDB.CurrentDatabaseType">
            <summary>
            数据库类型
            </summary>
            <returns>数据库类型</returns>
        </member>
        <member name="P:Beta.Utils.DataAccess.SqlDB.ConnectionString">
            <summary>
            数据库连接字符串属性
            </summary>
        </member>
        <member name="P:Beta.Utils.DataAccess.SqlDB.ConnectionManager">
            <summary>
            读写分离连接管理
            </summary>
        </member>
        <member name="P:Beta.Utils.DataAccess.SqlDB.CommandTimeout">
            <summary>
            CommandTimeout
            </summary>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.Dispose">
            <summary>
            手动释放资源
            </summary>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="isDispose">是否Dispose</param>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.Finalize">
            <summary>
            析构函数，释放资源
            </summary>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.GetConnection">
            <summary>
            取得连接对象
            </summary>
            <returns>SqlConnection连接对象</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.ReplaceNull(System.String,System.String)">
            <summary>
            格式化sql
            </summary>
            <param name="sql">sql语句</param>
            <param name="strpos">内容表达式</param>
            <returns>处理后的sql字符串</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.GetDataAdapter(System.Data.SqlClient.SqlCommand,System.Collections.Hashtable,System.Boolean)">
            <summary>
            拼接Parameters参数
            </summary>
            <param name="command">SqlCommand</param>
            <param name="pars">参数列表</param>
            <param name="isHasReturnVal">是否有返回值</param>
            <returns>StringBuilder拼接参数</returns>  
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.Process(System.String,System.Collections.Hashtable,System.String)">
            <summary>
            拼接参数处理
            </summary>
            <param name="rtnParName">参数返回值</param>
            <param name="pars">参数列表</param>
            <param name="procname">存储过程名</param>
            <param name="adapter">adapter</param>
            <returns>DataSet数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.ExcuteDataSet(System.String)">
            <summary>
            根据sql返回DataSet
            </summary>
            <param name="cmdText">sql语句或存储过程</param>
            <returns>DataSet数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.ExcuteDataSet(System.String,System.Collections.Hashtable)">
            <summary>
            根据存储过程,返回DataSet
            </summary>
            <param name="procname">存储过程名</param>
            <param name="pars">参数</param>
            <returns>DataSet数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.ExcuteDataSet(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            查询
            </summary>
            <param name="cmdText">SQL语句或者存储过程</param>
            <param name="cmdType">语句的类型</param>
            <param name="param">数据参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.ExcuteDataTable(System.String)">
            <summary>
            执行存储过程,返回DataTable
            </summary>
            <param name="cmdText">sql语句或存储过程</param>
            <returns>DataTable数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.ExcuteDataTable(System.String,System.Collections.Hashtable)">
            <summary>
            执行存储过程,返回DataTable
            </summary>
            <param name="procname">存储过程名</param>
            <param name="pars">参数列表</param>
            <returns>DataTable数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.ExcuteDataTable(System.String,System.Collections.Hashtable,System.String)">
            <summary>
            执行存储过程,返回DataTable
            </summary>
            <param name="procname">存储过程名</param>
            <param name="pars">参数列表</param>
            <param name="rtnParName">参数返回值</param>
            <returns>DataTable数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.ExcuteDataTable(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            查询
            </summary>
            <param name="cmdText">SQL语句或者存储过程</param>
            <param name="cmdType">语句的类型</param>
            <param name="param">数据参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.ExcuteDataReader(System.String)">
            <summary>
            执行无参数存储过程或SQL，返回DataReader
            </summary>
            <param name="cmdText">sql语句或存储过程</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.ExcuteDataReader(System.String,System.Collections.Hashtable)">
            <summary>
            执行存储过程，返回DataReader
            </summary>
            <param name="procName">存储过程名</param>
            <param name="pars">参数列表</param>
            <returns>DbDataReader数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.ExcuteDataReader(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            执行带参数存储过程或SQL，返回DataReader
            </summary>
            <param name="cmdText">SQL语句或者存储过程</param>
            <param name="cmdType">语句的类型</param>
            <param name="param">数据参数</param>
            <returns>DbDataReader数据集</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.ExecNonQuery(System.String)">
            <summary>
            执行无参数存储过程或SQL
            </summary>
            <param name="cmdText">sql语句或存储过程</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.ExecNonQuery(System.String,System.Collections.Hashtable)">
            <summary>
            返回受影响的记录数
            </summary>
            <param name="procname">存储过程名</param>
            <param name="pars">参数</param>
            <returns>受影响的记录数</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.ExecNonQuery(System.String,System.Collections.Hashtable,System.Boolean)">
            <summary>
            如果isHasReturnVal为true，则返回ID，否则返回受影响的记录数
            </summary>
            <param name="procname">存储过程名</param>
            <param name="pars">参数</param>
            <param name="isHasReturnVal">是否返回ID</param>
            <returns>如果isHasReturnVal为true，则返回ID，否则返回受影响的记录数</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.ExecNonQuery(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            查询
            </summary>
            <param name="cmdText">SQL语句或者存储过程</param>
            <param name="cmdType">语句的类型</param>
            <param name="param">数据参数</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.RunProcedureTran(System.Collections.Hashtable)">
            <summary>
            执行多个存储过程，实现数据库事务
             SqlParameter[] pare = new SqlParameter[2];
               pare[0] = new SqlParameter("@PageSize", SqlDbType.Int);
               pare[0].Value = 30;
               pare[1] = new SqlParameter("@PageIndex",SqlDbType.Int);
               pare[1].Value=1;            
               SqlParameter[] pare2 = new SqlParameter[1];
               pare2[0] = new SqlParameter("@CustomerID", SqlDbType.NChar);
               pare2[0].Value = "aaa";
               hsh.Add(pare, "usp_GetCustomers");
               hsh.Add(pare2, "WebFrameworkSample_Customers_GetOne");
               bool Re = idb.RunProcedureTran(hsh);
            </summary>
            <param name="procList">存储过程的哈希表（value为存储过程语句，key是该语句的DbParameter[]）</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.CommitTransaction">
            <summary>
            提交事务,页面需要设置《%@ Page Transaction="Required"%》
            </summary>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlDB.RollBackTransaction">
            <summary>
            回滚事务,页面需要设置《%@ Page Transaction="Required"%》
            </summary>
        </member>
        <member name="T:Beta.Utils.DataAccess.SqlHelper">
            <summary>
            SQLHelper 的摘要说明
            </summary>
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            </summary>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="T:Beta.Utils.DataAccess.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Beta.Utils.DataAccess.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:Beta.Utils.DataAccess.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],Beta.Utils.DataAccess.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="T:Beta.Utils.DataAccess.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Beta.Utils.DataAccess.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:Beta.Utils.DataAccess.thirdTSqlParser">
            <summary>
            第3方解析器（.net 4.6以后，请替换成Microsoft.SqlServer.Management.SqlParser.Parser，性能更好）
            </summary>
        </member>
        <member name="T:Beta.Utils.DataAccess.DBTraceFactory">
            <summary>
            链路追踪工厂（解耦net47）
            </summary>
        </member>
        <member name="P:Beta.Utils.DataAccess.DBTraceFactory.CreateTraceSpan">
            <summary>
            创建一个追踪Span的工厂方法
            </summary>
        </member>
        <member name="T:Beta.Utils.DateTimeHelper">
            <summary>
            日期常用操作函数集合
            </summary>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetTodayStr">
            <summary>
            根据默认格式取得今天日期字符串，如:"yyyy-MM-dd"
            </summary>
            <returns>yyyy-MM-dd格式的日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetTodayDiffStr(System.Int32)">
            <summary>
            根据默认格式取得和今天相差diffDay的日期字符串，如:"yyyy-MM-dd"
            </summary>
            <param name="diffDay">相差的天数</param>
            <returns>yyyy-MM-dd格式的相差某些天的日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetTodayShortDateStr">
            <summary>
            根据短日期格式要求取得今天日期字符串
            </summary>
            <returns>今天日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetTodayStr(System.String)">
            <summary>
            根据格式要求取得今天日期字符串
            </summary>
            <param name="format">格式字符串</param>
            <returns>特定格式的今天日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetFirstDayOfWeek">
            <summary>
            获取本周周一日期并转化为数字
            </summary>
            <returns>数字格式的本周周一日期</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetLastDayOfWeek">
            <summary>
            获取本周周未日期并转化为数字
            </summary>
            <returns>数字格式的本周周未日期</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetMonthStr">
            <summary>
            根据默认格式取得当月日期字符串，如:"yyyy-MM"
            </summary>
            <returns>yyyy-MM格式的月份字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetMonthShortDateStr">
            <summary>
            根据默认短月份格式取得当月日期字符串，如:"yyyyMM"
            </summary>
            <returns>yyyyMM格式的月份字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetMonthStrByFormat(System.String)">
            <summary>
            根据格式取得当月日期字符串
            </summary>
            <param name="format">格式</param>
            <returns>传入格式的月份字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetCurMonth">
            <summary>
            根据默认格式取得当月月份数字
            </summary>
            <returns>当月月份数字</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetMonthStr(System.DateTime)">
            <summary>
            根据默认格式取得日期的月份字符串，如:"yyyy-MM"
            </summary>
            <param name="dateTime">需要格式化的日期</param>
            <returns>传入日期的yyyy-MM格式的月份字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetMonthShortDateStr(System.DateTime)">
            <summary>
            根据默认格式取得日期的月份字符串，如:"yyyyMM"
            </summary>
            <param name="date">传入的日期</param>
            <returns>传入日期的yyyyMM格式的月份字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetMonthStr(System.DateTime,System.String)">
            <summary>
            根据格式取得日期的月份字符串
            </summary>
            <param name="dateTime">需要格式化的日期</param>
            <param name="format">格式化的格式</param>
            <returns>传入日期的传入格式的月份字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetMonthStr(System.Object)">
            <summary>
            根据默认格式取得日期的月份字符串，如:"yyyy-MM",转化不成功，返回空字符串
            </summary>
            <param name="obj">需要格式化的日期对象</param>
            <returns>取得日期的月份字符串，如:"yyyy-MM",转化不成功，返回空字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseFromOADate(System.Object,System.DateTime)">
            <summary>
            OA类型数据转换为DateTime,当对象为空或转换错误时返回指定默认值
            </summary>
            <param name="obj">需要转换的对象</param>
            <param name="defaultVal">默认值</param>
            <returns>DateTime类型数据，发生异常则返回默认日期</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseFromOADate(System.Object)">
            <summary>
            OA类型数据转换为DateTime,当对象为空或转换错误时返回默认值
            </summary>
            <param name="obj">需要转换的对象</param>
            <returns>日期格式数据</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseFromOADateEx(System.Object)">
            <summary>
            OA类型数据转换为DateTime,当对象为空或转换错误时丢出InvalidCastException
            </summary>
            <param name="obj">需要转换的对象</param>
            <returns>日期格式数据</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseFromShortDate(System.Object,System.DateTime)">
            <summary>
            将短日期格式数据转换为DateTime,形如：20090121,支持4位以上字符串,当对象为空或转换错误时返回指定默认值
            </summary>
            <param name="obj">需要转换的对象</param>
            <param name="defaultVal">默认值</param>
            <returns>日期格式数据</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseFromShortDate(System.Object)">
            <summary>
            将紧格式数据转换为DateTime,形如：20090121,支持4位以上字符串,当对象为空或转换错误时返回默认值
            </summary>
            <param name="obj">需要转换的对象</param>
            <returns>日期格式数据</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseFromShortDateEx(System.Object)">
            <summary>
            将紧格式数据转换为DateTime,形如：20090121,支持4位以上字符串,当对象为空或转换错误时丢出InvalidCastException
            </summary>
            <param name="obj">需要转换的对象</param>
            <returns>日期格式数据</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseToStr(System.DateTime,System.String)">
            <summary>
            根据格式取得日期字符串
            </summary>
            <param name="date">日期</param>
            <param name="format">格式字符串</param>
            <returns>传入格式的日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseToStr(System.DateTime)">
            <summary>
            根据默认格式取得日期字符串，如:"yyyy-MM-dd",默认为DEFAULT_DATETIME的日期字符串
            </summary>
            <param name="date">日期</param>
            <returns>yyyy-MM-dd格式的日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseToShortDateStr(System.DateTime)">
            <summary>
            取得短类型日期字符串，如:"yyyyMMdd"
            </summary>
            <param name="date">日期</param>
            <returns>yyyyMMdd格式的日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseDateToStr(System.Object,System.DateTime,System.String)">
            <summary>
            根据格式要求取得日期字符串
            </summary>
            <param name="obj">日期</param>
            <param name="defaultVal">转换错误的默认值</param>
            <param name="format">格式字符串</param>
            <returns>传入格式的日期字符串，转换过程中发生错误则返回传入的默认值</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseDateToStr(System.Object,System.DateTime)">
            <summary>
            根据默认格式要求取得日期字符串,如:"yyyy-MM-dd",默认为DEFAULT_DATETIME的日期字符串
            </summary>
            <param name="obj">日期</param>
            <param name="defaultVal">转换错误的默认值</param>
            <returns>yyyy-MM-dd格式的日期字符串，转换过程中发生错误则返回传入的默认值</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseDateToShortDateStr(System.Object,System.DateTime)">
            <summary>
            根据默认短日期格式要求取得日期字符串,如:"yyyyMMdd",默认为DEFAULT_DATETIME的短日期字符串
            </summary>
            <param name="obj">日期</param>
            <param name="defaultVal">转换错误的默认值</param>
            <returns>yyyyMMdd格式的日期字符串，转换过程中发生错误则返回传入的默认值</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseDateToStr(System.Object,System.String)">
            <summary>
            根据格式要求取得日期字符串,默认为DEFAULT_DATETIME的日期字符串
            </summary>
            <param name="obj">日期</param>
            <param name="format">格式字符串</param>
            <returns>传入特定格式的日期字符串，如果转换过程中发生错误则按系统默认值返回</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseDateToStr(System.Object)">
            <summary>
            根据默认格式取得日期字符串,如:"yyyy-MM-dd",默认为DEFAULT_DATETIME的日期字符串
            </summary>
            <param name="obj">日期</param>
            <returns>yyyy-MM-dd格式的日期字符串，如果转换过程中发生错误则按系统默认值返回</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseDateToShortDateStr(System.Object)">
            <summary>
            根据默认短日期格式取得日期字符串,如:"yyyyMMdd",默认为DEFAULT_DATETIME的短日期字符串
            </summary>
            <param name="obj">日期</param>
            <returns>yyyyMMdd格式的日期字符串，如果转换过程中发生错误则按系统默认值返回</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseDateToStrEx(System.Object,System.String)">
            <summary>
            根据格式要求取得日期字符串,当对象为空或转换错误时丢出InvalidCastException
            </summary>
            <param name="obj">日期</param>
            <param name="format">格式字符串</param>
            <returns>特定格式的日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseDateToStrEx(System.Object)">
            <summary>
            根据默认格式取得日期字符串，如:"yyyy-MM-dd",当对象为空或转换错误时丢出InvalidCastException
            </summary>
            <param name="obj">日期</param>
            <returns>yyyy-MM-dd格式的日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseDateToShortDateStrEx(System.Object)">
            <summary>
            根据默认短日期格式取得日期字符串，如:"yyyyMMdd",当对象为空或转换错误时丢出InvalidCastException
            </summary>
            <param name="obj">日期</param>
            <returns>yyyyMMdd格式的日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseShortDateToStr(System.Object,System.DateTime,System.String)">
            <summary>
            根据格式要求取得短类型日期字符串
            </summary>
            <param name="obj">日期</param>
            <param name="defaultVal">转换错误的默认值</param>
            <param name="format">格式字符串</param>
            <returns>特定格式的日期字符串，发生错误将返回传入的默认日期</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseShortDateToStr(System.Object,System.DateTime)">
            <summary>
            根据默认格式要求取得短类型日期字符串，如:"yyyy-MM-dd",
            </summary>
            <param name="obj">日期</param>
            <param name="defaultVal">转换错误的默认值</param>
            <returns>yyyy-MM-dd格式的日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseShortDateToShortDateStr(System.Object,System.DateTime)">
            <summary>
            根据默认短日期格式要求取得短类型日期字符串，如:"yyyyMMdd",
            </summary>
            <param name="obj">日期</param>
            <param name="defaultVal">转换错误的默认值</param>
            <returns>yyyyMMdd格式的日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseShortDateToStr(System.Object,System.String)">
            <summary>
            根据格式要求取得短类型日期字符串,默认为DEFAULT_DATETIME的日期字符串
            </summary>
            <param name="obj">日期</param>
            <param name="format">格式字符串</param>
            <returns>传入格式的日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseShortDateToStr(System.Object)">
            <summary>
            根据默认格式取得短类型日期字符串,如:"yyyy-MM-dd",默认为DEFAULT_DATETIME的日期字符串
            </summary>
            <param name="obj">日期</param>
            <returns>yyyy-MM-dd格式的日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseShortDateToShortDateStr(System.Object)">
            <summary>
            根据默认短日期格式取得短类型日期字符串,如:"yyyyMMdd",默认为DEFAULT_DATETIME的短格式日期字符串
            </summary>
            <param name="obj">日期</param>
            <returns>yyyyMMdd格式的日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseShortDateToStrEx(System.Object,System.String)">
            <summary>
            根据格式取得短类型日期字符串,当对象为空或转换错误时丢出InvalidCastException
            </summary>
            <param name="obj">日期</param>
            <param name="format">格式字符串</param>
            <returns>特定格式的日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseShortDateToStrEx(System.Object)">
            <summary>
            根据默认格式取得短类型日期字符串,如:"yyyy-MM-dd",当对象为空或转换错误时丢出InvalidCastException
            </summary>
            <param name="obj">日期</param>
            <returns>yyyy-MM-dd格式的日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseShortDateToShortDateStrEx(System.Object)">
            <summary>
            根据默认短日期格式取得短类型日期字符串,如:"yyyyMMdd",当对象为空或转换错误时丢出InvalidCastException
            </summary>
            <param name="obj">日期</param>
            <returns>yyyyMMdd格式的日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseDateToInt(System.DateTime)">
            <summary>
            取得日期数字,如:"yyyyMMdd"
            </summary>
            <param name="date">日期</param>
            <returns>日期数字</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseDateToInt(System.Object,System.DateTime)">
            <summary>
            将日期对象转换为数字,如:"yyyyMMdd"
            </summary>
            <param name="obj">日期</param>
            <param name="defaultVal">转换错误的默认值</param>
            <returns>日期对象转换后的数字</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseDateToInt(System.Object)">
            <summary>
            将日期对象转换为数字,如:"yyyyMMdd",默认为DEFAULT_DATETIME2INT
            </summary>
            <param name="obj">日期</param>
            <returns>日期对象转换后的数字</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseDateToIntEx(System.Object)">
            <summary>
            将日期对象转换为数字,如:"yyyyMMdd",当对象为空或转换错误时丢出InvalidCastException
            </summary>
            <param name="obj">日期</param>
            <returns>int日期对象转换后的数字</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.ParseFromShortDate(System.Object,System.DateTime@)">
            <summary>
            转换为日期型
            </summary>
            <param name="obj">object类型</param>
            <param name="val">输出DateTime类型</param>
            <returns>是否为短日期格式转换</returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetMondayDate">
            <summary>          
            /// 计算本周的周一日期       
            /// </summary>         
            /// <returns></returns>    
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetSundayDate">
            <summary>        
            计算本周周日的日期        
            /// </summary>          
            /// <returns></returns>    
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetMondayDate(System.DateTime)">
            <summary>          
            /// 计算某日起始日期（礼拜一的日期）     
            /// </summary>        
            /// <param name="someDate">该周中任意一天</param>     
            /// <returns>返回礼拜一日期，后面的具体时、分、秒和传入值相等</returns>     
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetSundayDate(System.DateTime)">
            <summary>        
            /// 计算某日结束日期（礼拜日的日期）         
            /// </summary>       
            /// <param name="someDate">该周中任意一天</param>       
            /// <returns>返回礼拜日日期，后面的具体时、分、秒和传入值相等</returns>    
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetWeekOfYear(System.DateTime)">
            <summary>
            获取该年中是第几周
            </summary>
            <param name="day">日期</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.FromUnixTime(System.Int64)">
            <summary>   
            将unixtime转换为.NET的DateTime   
            </summary>   
            <param name="timeStamp">秒数</param>   
            <returns>转换后的时间</returns>   
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.FromDateTime(System.DateTime)">
            <summary>   
            将.NET的DateTime转换为unix time   
            </summary>   
            <param name="dateTime">待转换的时间</param>   
            <returns>转换后的unix time</returns>   
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.FromUnixTimeByMilliseconds(System.Int64)">
            <summary>   
            将unixtime转换为.NET的DateTime   
            </summary>   
            <param name="timeStamp">秒数</param>   
            <returns>转换后的时间</returns>   
        </member>
        <member name="M:Beta.Utils.DateTimeHelper.GetUnixTimeByMilliseconds(System.DateTime)">
            <summary>   
            将.NET的DateTime转换为unix time   
            </summary>   
            <param name="dateTime">待转换的时间</param>   
            <returns>转换后的unix time</returns>   
        </member>
        <member name="T:Beta.Utils.ElasticSearchHelper">
            <summary>
            ES帮助类（此帮助类依赖Newtonsoft.Json版本>10.0）
            </summary>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="hosturl">如：http://localhost:9200</param>
            <param name="indexName"></param>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.WithLogin(System.String,System.String)">
            <summary>
            设置登录信息
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.IndexDocument(System.Object)">
            <summary>
            索引一个文档
            </summary>
            <param name="doc">文档内容，支持任意可序列化成Json的类型，不能包含_id</param>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.IndexDocument(System.String,System.Object)">
            <summary>
            索引一个文档
            </summary>
            <param name="_id">指定文档ID</param>
            <param name="doc">文档内容，支持任意可序列化成Json的类型</param>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.IndexDocuments(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            索引多个文档
            </summary>
            <param name="id_docs">Key为ID，Value为文档内容，其中ID可为空，ID为空时自动创建</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.IndexDocuments(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,System.String)">
            <summary>
            索引多个文档
            </summary>
            <param name="host"></param>
            <param name="indexName"></param>
            <param name="id_docs">Key为ID，Value为文档内容，其中ID可为空，ID为空时自动创建</param>
            <param name="password">密码</param>
            <param name="username">用户名</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.UpdateDocuments(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新多个文档
            </summary>
            <param name="id_docs">Key为ID，Value为要更新的文档内容（不需更新的字段不要出现，为空也不行，建议用字典类型，按需修改），ID不可空</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.UpdateDocuments(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            更新多个文档
            </summary>
            <param name="host"></param>
            <param name="indexName"></param>
            <param name="id_docs">Key为ID，Value为要更新的文档内容（不需更新的字段不要出现，为空也不行，建议用字典类型，按需修改），ID不可空</param>
            <param name="password">密码</param>
            <param name="username">用户名</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.IndexDocument(System.String,System.String,System.String,System.Object,System.String,System.String)">
            <summary>
            上传/索引一个文档
            </summary>
            <param name="host"></param>
            <param name="indexName"></param>
            <param name="doc">文档内容</param>
            <param name="password">密码</param>
            <param name="username">用户名</param>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.UpdateDocument(System.String,System.Object)">
            <summary>
            索引一个文档
            </summary>
            <param name="_id">ID，必需</param>
            <param name="doc">文档内容，支持任意可序列化成Json的类型</param>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.UpdateDocument(System.String,System.String,System.String,System.Object,System.String,System.String)">
            <summary>
            更新一个文档
            </summary>
            <param name="host"></param>
            <param name="indexName"></param>
            <param name="_id"></param>
            <param name="doc"></param>
            <param name="password">密码</param>
            <param name="username">用户名</param>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.Query(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.String,System.String)">
            <summary>
            执行查询（net 4.0）
            </summary>
            <param name="url"></param>
            <param name="method"></param>
            <param name="objects"></param>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.GetDocument(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            获取一个文档
            </summary>
            <param name="host"></param>
            <param name="indexName"></param>
            <param name="_id"></param>
            <param name="password">密码</param>
            <param name="username">用户名</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.GetDocuments(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String[])">
            <summary>
            获取多个文档
            </summary>
            <param name="host">主机</param>
            <param name="indexName">索引</param>
            <param name="ids">多个文档</param>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.GetDocuments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取多个文档
            </summary>
            <param name="ids">多个id</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.GetDocuments(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            获取多个文档
            </summary>
            <param name="ids">多个id</param>
            <param name="fields">指定要返回的字段</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.GetDocument(System.String)">
            <summary>
            获取单个文档内容
            </summary>
            <param name="_id"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.Search(System.String,System.String,System.Object,System.String,System.String)">
            <summary>
            查询
            </summary>
            <param name="host"></param>
            <param name="indexName"></param>
            <param name="dsl">查询模型，通过ESComposeQueryBuilder.Build得到</param>
            <param name="password">密码</param>
            <param name="username">用户名</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.Search(System.Object)">
            <summary>
            复杂查询
            </summary>
            <param name="dsl">查询模型，通过ESComposeQueryBuilder.Build得到</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.SimpleSearch(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            简单查询
            </summary>
            <param name="host"></param>
            <param name="indexName"></param>
            <param name="q">关键字，可以指定指段，格式为 字段名:关键字，如“Title:标题”，注意字段名大小写敏感</param>
            <param name="sort">排序依据，可空，如 Date:desc，注意字段名大小写敏感</param>
            <param name="_source">要返回的字段，可空，逗号分隔，如Title,Body，注意字段名大小写敏感</param>
            <param name="password">密码</param>
            <param name="username">用户名</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.SimpleSearch(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="q">关键字，可以指定指段，格式为 字段名:关键字，如“Title:标题”，注意字段名大小写敏感</param>
            <param name="sort">排序依据，可空，如 Date:desc，注意字段名大小写敏感</param>
            <param name="_source">要返回的字段，可空，逗号分隔，如Title,Body，注意字段名大小写敏感</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.Scroll(System.String,System.String,System.String,System.String)">
            <summary>
            滚动翻页
            </summary>
            <param name="host"></param>
            <param name="scroll_id">首次查询获得的_scroll_id</param>
            <param name="password">密码</param>
            <param name="username">用户名</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.Scroll(System.String)">
            <summary>
            滚动翻页
            </summary>
            <param name="scroll_id">首次查询获得的_scroll_id</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.AppendIfNotExist(System.String,System.String,System.String,System.String,System.Object,System.String,System.String)">
            <summary>
            将一个或多个元素添加到集合字段中，如果这个元素不存在的话
            </summary>
            <param name="host"></param>
            <param name="index"></param>
            <param name="_id">文档ID</param>
            <param name="field">集合字段名</param>
            <param name="value">可为单值，也可为数组</param>
            <param name="password">密码</param>
            <param name="username">用户名</param>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.Append(System.String,System.String,System.String,System.String,System.Object,System.String,System.String)">
            <summary>
            将一个或多个元素添加到集合字段中（不判断重复，需要判断重复请用AppendIfNotExist）
            </summary>
            <param name="host"></param>
            <param name="index"></param>
            <param name="_id">文档ID</param>
            <param name="field">集合字段名</param>
            <param name="value">可为单值，也可为数组</param>
            <param name="password">密码</param>
            <param name="username">用户名</param>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.AppendIfNotExist(System.String,System.String,System.Object)">
            <summary>
            将一个或多个元素添加到集合字段中，如果这个元素不存在的话
            </summary>
            <param name="_id">文档ID</param>
            <param name="field">集合字段名</param>
            <param name="value">可为单值，也可为数组</param>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.Append(System.String,System.String,System.Object)">
            <summary>
            将一个或多个元素添加到集合字段中（不判断重复，需要判断重复请用AppendIfNotExist）
            </summary>
            <param name="_id">文档ID</param>
            <param name="field">集合字段名</param>
            <param name="value">可为单值，也可为数组</param>
        </member>
        <member name="P:Beta.Utils.ElasticSearchHelper.ESSearchResult._scroll_id">
            <summary>
            Scroll方式分页时
            </summary>
        </member>
        <member name="P:Beta.Utils.ElasticSearchHelper.ESSearchResult._shards">
            <summary>
            索引分片查询返回信息
            </summary>
        </member>
        <member name="P:Beta.Utils.ElasticSearchHelper.ESSearchResult.hits">
            <summary>
            命中结果
            </summary>
        </member>
        <member name="P:Beta.Utils.ElasticSearchHelper.ESSearchResultHit.total">
            <summary>
            总数
            </summary>
        </member>
        <member name="P:Beta.Utils.ElasticSearchHelper.ESSearchResultHit.max_score">
            <summary>
            最高得分
            </summary>
        </member>
        <member name="P:Beta.Utils.ElasticSearchHelper.ESSearchResultHit.hits">
            <summary>
            结果明细
            </summary>
        </member>
        <member name="P:Beta.Utils.ElasticSearchHelper.ESSearchResultItem._index">
            <summary>
            索引名
            </summary>
        </member>
        <member name="P:Beta.Utils.ElasticSearchHelper.ESSearchResultItem._id">
            <summary>
            主键ID
            </summary>
        </member>
        <member name="P:Beta.Utils.ElasticSearchHelper.ESSearchResultItem._score">
            <summary>
            关联度得分
            </summary>
        </member>
        <member name="P:Beta.Utils.ElasticSearchHelper.ESSearchResultItem._source">
            <summary>
            文档数据
            </summary>
        </member>
        <member name="T:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder">
            <summary>
            ES组合查询
            </summary>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.UseScroll(System.String)">
            <summary>
            使用Scroll滚动翻页（使用scroll后，首次返回内容包含_scroll_id，后续使用Scroll方法，传入_scroll_id进行翻页）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.WithFields(System.String[])">
            <summary>
            指定需要返回字段
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.MatchAll">
            <summary>
            匹配所有（在匹配所有的前提下，可按排名得分排序，提取所有信息）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.Sort(System.String,System.Boolean)">
            <summary>
            排序
            </summary>
            <param name="field">字段名</param>
            <param name="desc">true为倒序，否则为正序</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.WithPageSize(System.Int32)">
            <summary>
            查询分页大小
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.WithPageIndex(System.Int32)">
            <summary>
            查询第N页
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.FilterTerm(System.String,System.Object)">
            <summary>
            全字匹配筛选，不计入排名得分
            </summary>
            <param name="field">字段名</param>
            <param name="value">值，可为数组</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.FilterRange(System.String,System.Object,System.Object)">
            <summary>
            区间筛选
            </summary>
            <param name="field">字段名</param>
            <param name="start">最小阈值，可空</param>
            <param name="end">最大阈值，可空</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.FilterMatch(System.String,System.Object)">
            <summary>
            全文检索筛选，不计入排名得分
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值，可为数组</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.MustTerm(System.String,System.Object)">
            <summary>
            全字匹配筛选，计入排名得分
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值，可为数组</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.MustMatch(System.String,System.Object)">
            <summary>
            全文检索筛选，计入排名得分
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值，可为数组</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.MustNot_Term(System.String,System.Object)">
            <summary>
            排除关键字过滤（全字匹配）
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.MustNot(System.String,System.String,System.Object)">
            <summary>
            排除关键字过滤（全字匹配）
            </summary>
            <param name="verb">谓词</param>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.Must(System.String,System.String,System.Object)">
            <summary>
            必需关键字过滤（自定义）
            </summary>
            <param name="verb">谓词</param>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.Filter(System.String,System.String,System.Object)">
            <summary>
            filter关键字过滤（自定义）
            </summary>
            <param name="verb">谓词</param>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.MustNot_Match(System.String,System.Object)">
            <summary>
            排除关键字过滤（全文索引）
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.ShouldTerm(System.String,System.Object)">
            <summary>
            可选关键字，命中则增加排名得分，使排名靠前（全字匹配）
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.ShouldMatch(System.String,System.Object)">
            <summary>
            可选关键字，命中则增加排名得分，使排名靠前（全文索引）
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.WithMinShouldMatch(System.Int32)">
            <summary>
            设置should条件最小应该命中的个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ElasticSearchHelper.ESComposeQueryBuilder.WithBoost(System.Double)">
             <summary>
            设置起点分数
             </summary>
             <returns></returns>
        </member>
        <member name="T:Beta.Utils.EncryptHelper">
            <summary>
            加解密处理类
            </summary>
        </member>
        <member name="F:Beta.Utils.EncryptHelper.DEFAULTKEY">
            <summary>
            默认密钥，为128位密钥，用于默认的AES加密、解密算法
            </summary>
        </member>
        <member name="F:Beta.Utils.EncryptHelper.KEYLENGTH">
            <summary>
            密钥长度，16个字节（128位加密）
            </summary>
        </member>
        <member name="M:Beta.Utils.EncryptHelper.ByteArrayToHexStr(System.Byte[])">
            <summary>
            字节数组转十六进制
            </summary>
            <param name="buffer">字节数组</param>
            <returns>十六进制</returns>
        </member>
        <member name="M:Beta.Utils.EncryptHelper.HexStrToByteArray(System.String)">
            <summary>
            十六进制转字节数组
            </summary>
            <param name="hexStr">十六进制</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Beta.Utils.EncryptHelper.MD5Encode(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="value">待散列的字符串</param>
            <returns>散列值字符串（BASE64编码）</returns>
        </member>
        <member name="M:Beta.Utils.EncryptHelper.MD5EncodeHex(System.String,System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="value">待散列的字符串</param>
            <returns>散列值字符串（BASE64编码）</returns>
        </member>
        <member name="M:Beta.Utils.EncryptHelper.RijndaelDecode(System.Byte[],System.Byte[])">
            <summary>
            Rijndae解密
            </summary>
            <param name="input">输入</param>
            <param name="key">密钥</param>
            <returns>解密后数据</returns>
        </member>
        <member name="M:Beta.Utils.EncryptHelper.RijndaelEncode(System.Byte[],System.Byte[])">
            <summary>
            Rijndae加密
            </summary>
            <param name="input">输入</param>
            <param name="key">密钥</param>
            <returns>加密后数据</returns>
        </member>
        <member name="T:Beta.Utils.EnvironmentHelper">
            <summary>
            环境处理，提供有关环境的属性和处理方法
            </summary>
        </member>
        <member name="P:Beta.Utils.EnvironmentHelper.GateWayDepth">
            <summary>
            当前服务器所处环境的网关/代理层级，-1为未知，0代表没有网关/代理直接暴露在公网，1代表前面有一级网关/代理，以此类推
            </summary>
        </member>
        <member name="P:Beta.Utils.EnvironmentHelper.AllIPAddress">
            <summary>
            获取所有可能的IP地址
            </summary>
        </member>
        <member name="P:Beta.Utils.EnvironmentHelper.IPAddress">
            <summary>
            根据GateWayDepth获取真实IP
            </summary>
        </member>
        <member name="M:Beta.Utils.EnvironmentHelper.GetIPAddress(System.Int32)">
            <summary>
            根据GateWayDepth获取真实IP
            </summary>
        </member>
        <member name="P:Beta.Utils.EnvironmentHelper.RootVPath">
            <summary>
            获取WEB应用程序虚拟目录
            </summary>
        </member>
        <member name="P:Beta.Utils.EnvironmentHelper.PhyAppPath">
            <summary>
             获取Web应用程序物理根目录
            </summary>
        </member>
        <member name="P:Beta.Utils.EnvironmentHelper.ComputeName">
            <summary>
            获取服务器的机器名
            </summary>
        </member>
        <member name="P:Beta.Utils.EnvironmentHelper.BinPath">
            <summary>
            获取bin目录路径
            </summary>
        </member>
        <member name="P:Beta.Utils.EnvironmentHelper.GetAuthPwd">
            <summary>
            当使用基本验证模式时，获取客户在密码对话框中输入的密码
            </summary>
        </member>
        <member name="M:Beta.Utils.EnvironmentHelper.GetBrowseType">
            <summary>
            获取浏览器类型
            </summary>
            <returns>Firefox,IE,Opera,Safari,Wap</returns>
        </member>
        <member name="M:Beta.Utils.EnvironmentHelper.GetCustomErrorSection">
            <summary>
            获取自定义错误配置节
            </summary>
            <returns>CustomErrorsSection</returns>
        </member>
        <member name="M:Beta.Utils.EnvironmentHelper.GetCustomErrorURL(System.Web.Configuration.CustomErrorsSection)">
            <summary>
            根据CustomeErrors配置获取错误处理页面URL
            </summary>
            <param name="customErrorsSection">错误配置节</param>
            <returns>错误处理页面URL</returns>
        </member>
        <member name="M:Beta.Utils.EnvironmentHelper.GoToErrURLAndSendErrMsg(System.Exception)">
            <summary>
            把错误信息发送并跳转到错误页面
            </summary>
            <param name="ex">异常</param>
        </member>
        <member name="M:Beta.Utils.EnvironmentHelper.GoToErrURLAndSendErrMsg(System.String)">
            <summary>
            把错误信息发送并跳转到错误页面
            </summary>
            <param name="ex">异常</param>
        </member>
        <member name="M:Beta.Utils.EnvironmentHelper.GetQueryParameter(System.String)">
            <summary>
            获取URL中的参数值
            </summary>
            <param name="parameterName">参数名</param>
            <returns>传入的URL中的参数值</returns>
        </member>
        <member name="M:Beta.Utils.EnvironmentHelper.GetQueryParameter(System.String,System.String)">
            <summary>
            获取URL中的参数值
            </summary>
            <param name="parameterName">参数名</param>
            <param name="defalutValue">如果没有该参数则返回默认值</param>
            <returns>传入的URL中的参数值，如果Url中没有该参数则返回传入的默认值</returns>
        </member>
        <member name="M:Beta.Utils.EnvironmentHelper.AppVersion(System.String)">
            <summary>
            修改app的版本号
            </summary>
            <param name="vers"></param>
            <returns></returns>
        </member>
        <member name="P:Beta.Utils.EnvironmentHelper.ServiceName">
            <summary>
            取服务名称（优先取ServiceName配置，未配置则取程序集名称）
            </summary>
        </member>
        <member name="T:Beta.Utils.ExcelHelper">
            <summary>
            Excel读取操作，不适用IIS6+64位系统
            </summary>
        </member>
        <member name="P:Beta.Utils.ExcelHelper.FilePath">
            <summary>
            Excel文件路径
            </summary>
        </member>
        <member name="P:Beta.Utils.ExcelHelper.HasRowHeader">
            <summary>
            是否有标题行
            </summary>
        </member>
        <member name="P:Beta.Utils.ExcelHelper.Sheets">
            <summary>
            Excel中的Sheet
            </summary>
        </member>
        <member name="M:Beta.Utils.ExcelHelper.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">文件路径</param>
            <param name="hasRowHeader">是否有标题行</param>
            <exception cref="T:System.IO.FileNotFoundException">没有找到文件的异常</exception>
        </member>
        <member name="M:Beta.Utils.ExcelHelper.GetDataTableBySheet(System.String)">
            <summary>
            读取一个Excel文件的sheet至DataTable
            </summary>
            <param name="sheet">sheet名</param>
            <returns>传入sheet的数据表</returns>
        </member>
        <member name="M:Beta.Utils.ExcelHelper.ExcelSheetsToDS">
            <summary>
            读取一个Excel文件至DataSet
            </summary>
            <returns>包含所有sheet数据的Dataset</returns>
        </member>
        <member name="M:Beta.Utils.ExcelHelper.GetSheetNameList">
            <summary>
            获取Excel所有工作表的名称
            </summary>
            <returns>sheet的名称列表</returns>
        </member>
        <member name="M:Beta.Utils.ExcelHelper.DataSetToExcel(System.Data.DataSet,System.String)">
            <summary>
            DataSet导出EXCEL
            </summary>
            <param name="srcDataSet"></param>
            <param name="destExcelPath"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ExcelHelper.Export2File(System.Data.DataSet,System.String)">
            <summary>
            导出到Excel文件（使用NPOI库）
            </summary>
            <param name="srcDataSet"></param>
            <param name="destExcelPath"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ExcelHelper.Export2Stream(System.Data.DataSet,System.Boolean,System.IO.Stream)">
            <summary>
            导出到流（使用NPOI库）
            </summary>
            <param name="srcDataSet"></param>
            <param name="xlsx">是否xlsx格式</param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ExcelHelper.ReadFromFile(System.String,System.Data.DataSet@,System.String@)">
            <summary>
            从文件读取（使用NPOI库）
            </summary>
            <param name="srcExcelPath"></param>
            <param name="data"></param>
            <param name="msg">错误消息（返回false时有效）</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ExcelHelper.ReadFromStream(System.IO.Stream,System.Boolean,System.Data.DataSet@,System.String@)">
            <summary>
            从流读取（使用NPOI库）
            </summary>
            <param name="stream"></param>
            <param name="xlsx">是否xlsx格式</param>
            <param name="data"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ExcelHelper.GetValueType(NPOI.SS.UserModel.ICell)">
            <summary>
            获取单元格类型
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="T:Beta.Utils.FileHelper">
            <summary>
            文件导出处理类
            </summary>
        </member>
        <member name="T:Beta.Utils.FileHelper.ExportFileType">
            <summary>
            支持导出的文件类型
            </summary>
        </member>
        <member name="F:Beta.Utils.FileHelper.ExportFileType.Excel">
            <summary>
            Excel文件
            </summary>
        </member>
        <member name="F:Beta.Utils.FileHelper.ExportFileType.Word">
            <summary>
            Word文件
            </summary>
        </member>
        <member name="F:Beta.Utils.FileHelper.ExportFileType.PDF">
            <summary>
            PDF文件
            </summary>
        </member>
        <member name="F:Beta.Utils.FileHelper.ExportFileType.XML">
            <summary>
            XML文件
            </summary>
        </member>
        <member name="F:Beta.Utils.FileHelper.ExportFileType.ZIP">
            <summary>
            ZIP文件
            </summary>
        </member>
        <member name="F:Beta.Utils.FileHelper.ExportFileType.Txt">
            <summary>
            Txt文件
            </summary>
        </member>
        <member name="F:Beta.Utils.FileHelper.ExportFileType.CSV">
            <summary>
            CSV文件
            </summary>
        </member>
        <member name="F:Beta.Utils.FileHelper.CONST_REPONSEHEADER_EXCEL">
            <summary>
            文件流的头信息
            </summary>
        </member>
        <member name="F:Beta.Utils.FileHelper.PATH_SPLIT_CHAR">
            <summary>              
            路径分割符               
            </summary>            
        </member>
        <member name="M:Beta.Utils.FileHelper.IsDirectoryExist(System.String)">
            <summary>
            判断目录是否存在
            </summary>
            <param name="directoryName">目录名</param>
            <returns>True表示目录存在，False表示目录不存在</returns>
        </member>
        <member name="M:Beta.Utils.FileHelper.IsFileExist(System.String)">
            <summary>
            判断文件是否存在
            </summary>
            <param name="fileName">带路径的文件名</param>
            <returns>True表示文件存在，False表示文件不存在</returns>
        </member>
        <member name="M:Beta.Utils.FileHelper.GetFileExtendName(System.String)">
            <summary>
            获取文件的扩展名
            </summary>
            <param name="fileName">文件名</param>
            <returns>文件的扩展名</returns>
        </member>
        <member name="M:Beta.Utils.FileHelper.GetFileName(System.String)">
            <summary>
            获取包含路径的文件名中的文件名
            </summary>
            <param name="path">带路径的文件名</param>
            <returns>路径中的文件名</returns>
        </member>
        <member name="M:Beta.Utils.FileHelper.GetFileLength(System.String)">
            <summary>
            获取文件的大小
            </summary>
            <param name="fileName">文件名</param>
            <returns>文件的大小</returns>
        </member>
        <member name="M:Beta.Utils.FileHelper.GetFileLengthWithFormat(System.String)">
            <summary>
            获取文件的大小，带单位的格式化文本，如1B、1KB、1MB、1GB
            </summary>
            <param name="fileName">文件名</param>
            <returns>文件的大小，带单位的格式化文本</returns>
        </member>
        <member name="M:Beta.Utils.FileHelper.GetSizeFormat(System.Int64)">
            <summary>
            文件大小格式化，如1B、1KB、1MB、1GB
            </summary>
            <param name="size">文件大小</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.FileHelper.GetFileInfo(System.String)">
            <summary>
            获取文件信息
            </summary>
            <param name="fileName">文件名</param>
            <returns>文件信息对象</returns>
        </member>
        <member name="M:Beta.Utils.FileHelper.GetFileContent(System.String)">
            <summary>
            读取文本文件的内容
            </summary>
            <param name="filePath">文本文件的路径</param>
            <returns>文本文件的内容</returns>
        </member>
        <member name="M:Beta.Utils.FileHelper.GetFileContent(System.String,System.Text.Encoding)">
            <summary>
            读取文本文件的内容
            </summary>
            <param name="filePath">文本文件的路径</param>
            <param name="encoding">文件编码</param>
            <returns>文本文件的内容</returns>
        </member>
        <member name="M:Beta.Utils.FileHelper.GetMd5CodeOfFile(System.String)">
            <summary>
            计算一个文件的md5码
            </summary>
            <param name="fullFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.FileHelper.GetFileEncoding(System.String)">
            <summary>
            获取文件编码
            </summary>
            <param name="filefullname"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.FileHelper.CopyFiles(System.String,System.String,System.Boolean)">
            <summary>   
            复制指定目录的所有文件,不包含子目录及子目录中的文件   
            </summary>   
            <param name="sourceDir">原始目录</param>   
            <param name="targetDir">目标目录</param>   
            <param name="overWrite">如果为true,表示覆盖同名文件,否则不覆盖</param>   
        </member>
        <member name="M:Beta.Utils.FileHelper.CopyFiles(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>   
            复制指定目录的所有文件   
            </summary>   
            <param name="sourceDir">原始目录</param>   
            <param name="targetDir">目标目录</param>   
            <param name="overWrite">如果为true,覆盖同名文件,否则不覆盖</param>   
            <param name="copySubDir">如果为true,包含目录,否则不包含</param>   
        </member>
        <member name="M:Beta.Utils.FileHelper.MoveFiles(System.String,System.String,System.Boolean)">
            <summary>   
            剪切指定目录的所有文件,不包含子目录   
            </summary>   
            <param name="sourceDir">原始目录</param>   
            <param name="targetDir">目标目录</param>   
            <param name="overWrite">如果为true,覆盖同名文件,否则不覆盖</param>   
        </member>
        <member name="M:Beta.Utils.FileHelper.MoveFiles(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>   
            剪切指定目录的所有文件   
            </summary>   
            <param name="sourceDir">原始目录</param>   
            <param name="targetDir">目标目录</param>   
            <param name="overWrite">如果为true,覆盖同名文件,否则不覆盖</param>   
            <param name="moveSubDir">如果为true,包含目录,否则不包含</param>   
        </member>
        <member name="M:Beta.Utils.FileHelper.DeleteFiles(System.String)">
            <summary>   
            删除指定目录的所有文件，不包含子目录   
            </summary>   
            <param name="targetDir">操作目录</param>   
        </member>
        <member name="M:Beta.Utils.FileHelper.DeleteFiles(System.String,System.Boolean)">
            <summary>   
            删除指定目录的所有文件和子目录   
            </summary>   
            <param name="targetDir">操作目录</param>   
            <param name="delSubDir">如果为true,包含对子目录的操作</param>   
        </member>
        <member name="M:Beta.Utils.FileHelper.CreateDirectory(System.String)">
            <summary>   
            创建指定目录   
            </summary>   
            <param name="targetDir"></param>   
        </member>
        <member name="M:Beta.Utils.FileHelper.CreateDirectory(System.String,System.String)">
            <summary>   
            建立子目录   
            </summary>   
            <param name="targetDir">目录路径</param>   
            <param name="subDirName">子目录名称</param>   
        </member>
        <member name="M:Beta.Utils.FileHelper.DeleteDirectory(System.String)">
            <summary>   
            删除指定目录   
            </summary>   
            <param name="targetDir">目录路径</param>   
        </member>
        <member name="M:Beta.Utils.FileHelper.DeleteSubDirectory(System.String)">
            <summary>   
            删除指定目录的所有子目录,不包括对当前目录文件的删除   
            </summary>   
            <param name="targetDir">目录路径</param>   
        </member>
        <member name="M:Beta.Utils.FileHelper.GetImageBase64(System.String)">
            <summary>
            读图片转为Base64String
            </summary>
            <param name="fullFileName">完整图片文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.FileHelper.SaveImageFromBase64(System.String,System.String)">
            <summary>
            将Base64String转为图片并保存，同名文件会自动覆盖
            </summary>
            <param name="strBase64">图片Base64</param>
            <param name="fullFileName">完整图片文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.FileHelper.ExportFile(System.String)">
            <summary> 
            将物理地址下的某文件提供给用户下载 
            </summary> 
            <param name="filePath">文件路径</param> 
        </member>
        <member name="M:Beta.Utils.FileHelper.ExportFile(System.String,System.Text.Encoding)">
            <summary> 
            将物理地址下的某文件提供给用户下载 
            </summary> 
            <param name="filePath">文件路径</param> 
            <param name="encoding">输出流HTTP字符集</param> 
        </member>
        <member name="M:Beta.Utils.FileHelper.ExportToExcel(System.String,System.String)">
            <summary>
            将内容导出成UTF8的编码的Excel文件
            </summary>
            <param name="contents">需要导出的内容</param>
            <param name="fileName">导出的文件名</param>
        </member>
        <member name="M:Beta.Utils.FileHelper.ExportToExcel(System.String,System.String,System.Text.Encoding)">
            <summary>
            将内容导出成特定编码的Excel文件
            </summary>
            <param name="contents">需要导出的内容</param>
            <param name="fileName">导出的文件名</param>
            <param name="encoding">输出流HTTP字符集</param>
        </member>
        <member name="M:Beta.Utils.FileHelper.ExportToExcel(System.String,System.String,Beta.Utils.FileHelper.ExportFileType,System.Text.Encoding)">
            <summary>
            将内容导出成特定格式的文件
            </summary>
            <param name="contents">需要导出的内容</param>
            <param name="fileName">导出的文件名</param>
            <param name="fileType">导出的文件类型，默认为导出Excel文件</param>
            <param name="encoding">输出流HTTP字符集</param>
        </member>
        <member name="M:Beta.Utils.FileHelper.ExportToExcel(System.String,System.Web.UI.WebControls.GridView)">
            <summary>
            将GridView控件中的数据导出excel
            </summary>
            <param name="fileName">文件名</param>
            <param name="gridView">GridView控件</param>
        </member>
        <member name="M:Beta.Utils.FileHelper.ExportToExcel(System.String,System.Data.DataTable)">
            <summary>
            将DataTable导出Excel
            </summary>
            <param name="fileName">文件名</param>
            <param name="dtSource">数据源</param>
        </member>
        <member name="M:Beta.Utils.FileHelper.ExportToExcel(System.String,System.Web.UI.Page)">
            <summary>
            将Page中导出excel
            </summary>
            <param name="fileName">文件名</param>
            <param name="page">Page</param>
        </member>
        <member name="M:Beta.Utils.FileHelper.ZipFile(System.String,System.Collections.Generic.List{System.IO.FileInfo})">
            <summary>
            将传入的文件集合压缩成一个包（不适用于好压软件解压）
            </summary>
            <param name="zipfilename">压缩包的文件名</param>
            <param name="fileInfos">需要压缩的文件集合</param>
        </member>
        <member name="M:Beta.Utils.FileHelper.ZipFile(System.String,System.Collections.Generic.List{System.IO.FileInfo},System.Boolean)">
            <summary>
             将传入的文件集合压缩成一个包（不适用于好压软件解压）
            </summary>
            <param name="zipfilename">压缩包的文件名</param>
            <param name="fileInfos">需要压缩的文件集合</param>
            <param name="isDeleteFiles">压缩后是否删除压缩前的所有文件</param>
        </member>
        <member name="M:Beta.Utils.FileHelper.ZipFile(System.String,System.Collections.Generic.List{System.IO.FileInfo},System.Boolean,System.String)">
            <summary>
             将传入的文件集合压缩成一个包（不适用于好压软件解压）
            </summary>
            <param name="zipfilename">压缩包的文件名</param>
            <param name="fileInfos">需要压缩的文件集合</param>
            <param name="isDeleteFiles">压缩后是否删除压缩前的所有文件</param>
            <param name="password">加密密码</param>
        </member>
        <member name="M:Beta.Utils.FileHelper.ZipFile(System.String,System.String,System.Collections.Generic.List{System.IO.FileInfo})">
            <summary>
            将传入的文件集合压缩成一个包（适用于所有的解压软件）
            </summary>
            <param name="dirName">目录名</param>
            <param name="zipFileName">压缩包的文件名</param>
            <param name="fileInfos">文件集合信息</param>
        </member>
        <member name="M:Beta.Utils.FileHelper.UnZip(System.String,System.String)">
            <summary> 
            解压缩文件(压缩文件中含有子目录) 
            </summary> 
            <param name="zipFilePath">待解压缩的文件路径 </param> 
            <param name="unZipPath">解压缩到指定目录 </param> 
            <returns>解压后的文件列表 </returns> 
        </member>
        <member name="M:Beta.Utils.FileHelper.UnZip(System.String,System.String,System.String)">
            <summary> 
            解压缩文件(压缩文件中含有子目录) 
            </summary> 
            <param name="zipFilePath">待解压缩的文件路径 </param> 
            <param name="unZipPath">解压缩到指定目录 </param> 
            <param name="password">解压缩密码 </param> 
            <returns>解压后的文件列表 </returns> 
        </member>
        <member name="M:Beta.Utils.FileHelper.writeStream(ICSharpCode.SharpZipLib.Zip.ZipOutputStream@,System.Collections.Generic.List{System.IO.FileInfo},ICSharpCode.SharpZipLib.Checksums.Crc32)">
            <summary>
            压缩文件
            </summary>
            <param name="zStream">文件流</param>
            <param name="fileInfos">文件集合</param>
            <param name="crc">Crc32</param>
        </member>
        <member name="T:Beta.Utils.HQHelper">
            <summary>
            行情数据压缩
            </summary>
        </member>
        <member name="F:Beta.Utils.HQHelper.JS_MAX_SAFE_INTEGER">
            <summary>
            JS中最大的安全整数
            </summary>
        </member>
        <member name="M:Beta.Utils.HQHelper.ConvertDouble2Long(System.Double,System.Int32)">
            <summary>
            将浮点数据按比例转换不整型
            </summary>
            <param name="v">待转换的浮点型数据</param>
            <param name="scale">放大倍数</param>
            <returns>整型数据</returns>
        </member>
        <member name="M:Beta.Utils.HQHelper.ConvertRegularData(System.Collections.Generic.IList{System.Double},System.Int32,System.Int32,System.Int32)">
            <summary>
            将规则步长的浮点数序列转换成指定整型序列
            </summary>
            <param name="originalData">待转换序列</param>
            <param name="originalStep">原始步长（天）</param>
            <param name="scale">放大倍数</param>
            <param name="maxPoint">结果集允许的最大长度</param>
            <returns>整型数据序列</returns>
        </member>
        <member name="M:Beta.Utils.HQHelper.ConvertRegularData(System.Collections.Generic.IList{System.Double},System.DateTime,System.Int32,System.DateTime,System.Int32,System.Int32)">
            <summary>
            将规则步进的浮点数序列转换成指定整型时间/数据序列
            </summary>
            <param name="originalData">待转换序列</param>
            <param name="startDate">开始日期</param>
            <param name="originalStep">原始步长（天）</param>
            <param name="endDate">结束日期</param>
            <param name="scale">放大倍数</param>
            <param name="maxPoint">结果集允许的最大长度</param>
            <returns>整型时间/数据序列</returns>
        </member>
        <member name="M:Beta.Utils.HQHelper.Convert(System.Func{System.Int32,System.DateTime},System.Func{System.Int32,System.Double},System.Int32,System.Int32,System.Int32)">
            <summary>
            将浮点数序列转换成指定整型时间/数据序列
            </summary>
            <param name="dateGetter"></param>
            <param name="valueGetter"></param>
            <param name="originalDataCount"></param>
            <param name="scale"></param>
            <param name="maxPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.HQHelper.ConvertDiscreteData(System.Func{System.Int32,System.DateTime},System.Func{System.Int32,System.Double},System.Int32,System.Int32,System.Int32)">
            <summary>
            将包含空值浮点数序列（间断曲线）转换成指定整型时间/数据序列
            </summary>
            <param name="dateGetter"></param>
            <param name="valueGetter"></param>
            <param name="originalDataCount"></param>
            <param name="scale"></param>
            <param name="maxPoint"></param>
            <returns></returns>
        </member>
        <member name="T:Beta.Utils.HQValues">
            <summary>
            行情序列数据
            </summary>
        </member>
        <member name="P:Beta.Utils.HQValues.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:Beta.Utils.HQValues.BetaCode">
            <summary>
            BetaCode
            </summary>
        </member>
        <member name="P:Beta.Utils.HQValues.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Beta.Utils.HQValues.StartDate">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:Beta.Utils.HQValues.EndDate">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:Beta.Utils.HQValues.Step">
            <summary>
            时间步长（天），默认为一天,
            </summary>
        </member>
        <member name="P:Beta.Utils.HQValues.Scale">
            <summary>
            放大倍数
            </summary>
        </member>
        <member name="T:Beta.Utils.HQDateValues">
            <summary>
            行情序列数据
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Beta.Utils.HQDateValues.StartDate">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:Beta.Utils.HQDateValues.Date">
            <summary>
            日期（偏移值）
            </summary>
        </member>
        <member name="P:Beta.Utils.HQDateValues.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:Beta.Utils.HQDateValues.BetaCode">
            <summary>
            BetaCode
            </summary>
        </member>
        <member name="P:Beta.Utils.HQDateValues.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Beta.Utils.HQDateValues.Scale">
            <summary>
            放大倍数
            </summary>
        </member>
        <member name="T:Beta.Utils.HttpHelper.HttpItem">
            <summary>
            Http请求参考类
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.URL">
            <summary>
            请求URL必须填写
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.Method">
            <summary>
            请求方式默认为GET方式,当为POST方式时必须设置Postdata的值
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.Timeout">
            <summary>
            默认请求超时时间
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.ReadWriteTimeout">
            <summary>
            默认写入Post数据超时间
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.KeepAlive">
            <summary>
             获取或设置一个值，该值指示是否与 Internet 资源建立持久性连接默认为true。
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.Accept">
            <summary>
            请求标头值 默认为text/html, application/xhtml+xml, */*
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.ContentType">
            <summary>
            请求返回类型默认 text/html
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.UserAgent">
            <summary>
            客户端访问信息默认Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.Encoding">
            <summary>
            返回数据编码默认为NUll,可以自动识别,一般为utf-8,gbk,gb2312
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.Postdata">
            <summary>
            Post请求时要发送的字符串Post数据
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.CookieCollection">
            <summary>
            Cookie对象集合
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.Cookie">
            <summary>
            请求时的Cookie
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.Referer">
            <summary>
            来源地址，上次访问地址
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.Allowautoredirect">
            <summary>
            支持跳转页面，查询结果将是跳转后的页面，默认是不跳转
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.Connectionlimit">
            <summary>
            最大连接数
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.ProxyUserName">
            <summary>
            代理Proxy 服务器用户名
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.ProxyPwd">
            <summary>
            代理 服务器密码
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.ProxyIp">
            <summary>
            代理 服务IP
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.Header">
            <summary>
            header对象
            </summary>
        </member>
        <member name="P:Beta.Utils.HttpHelper.HttpItem.PostEncoding">
            <summary>
            设置或获取Post参数编码,默认的为Default编码
            </summary>
        </member>
        <member name="M:Beta.Utils.HttpHelper.SetRequest(Beta.Utils.HttpHelper.HttpItem)">
             <summary>
             为请求准备参数
             </summary>
            <param name="item">参数列表</param>
        </member>
        <member name="M:Beta.Utils.ImageHelper.ZoomPicture(System.String,System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
            按比例缩放图片。如果width小于等于0，则按照height缩放；如果height小于等于0，则按照width缩放；如果两者都大于0，则按照缩放比例大的进行等比例缩放
            </summary>
            <param name="sourcePathFile">原图片文件的地址</param>
            <param name="destPathFile">目标图片文件的地址</param>
            <param name="width">目标图片的宽</param>
            <param name="height">目标图片的高</param>
            <param name="quality">图片缩放的质量，默认80</param>
            <returns>操作成功返回true，否则false</returns>
        </member>
        <member name="M:Beta.Utils.ImageHelper.SplitPicture(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            分割图片（当图片尺寸不可整除时，最后一行/一列 图可能会比平均大）
            </summary>
            <param name="source">源图</param>
            <param name="splitHeight">水平分割片高度</param>
            <param name="splitWidth">垂直分割宽度</param>
            <returns>位图矩阵</returns>
        </member>
        <member name="M:Beta.Utils.ImageHelper.SplitPicture(System.String,System.Int32,System.Int32)">
            <summary>
            分割图片（当图片尺寸不可整除时，最后一行/一列 图可能会比平均大）
            </summary>
            <param name="source">源图</param>
            <param name="splitHeight">水平分割片高度</param>
            <param name="splitWidth">垂直分割宽度</param>
            <returns>位图矩阵</returns>
        </member>
        <member name="T:Beta.Utils.JsonHelper">
            <summary>
            JSON对象操作工具
            </summary>
        </member>
        <member name="M:Beta.Utils.JsonHelper.ToJson(System.Object)">
            <summary>
            将对象转换成JSON格式数据，不支持值类型直接传入
            </summary>
            <param name="obj">需要转换的对象</param>
            <returns>json格式的对象</returns>
        </member>
        <member name="M:Beta.Utils.JsonHelper.ToJson(System.Object,System.String[])">
            <summary>
            对象根据属性列表转化Json,不支持值类型直接传入
            </summary>
            <param name="obj">需要转换的对象</param>
            <param name="propertyNames">属性名</param>
            <returns>json格式的对象</returns>
        </member>
        <member name="M:Beta.Utils.JsonHelper.ToJson(System.Data.DataSet)">
            <summary>  
            DataSet转换成Json格式  
            </summary>  
            <param name="dsSource">DataSet数据源</param>  
            <returns></returns>  
        </member>
        <member name="M:Beta.Utils.JsonHelper.ToJson(System.Data.DataTable)">
            <summary>  
            DataTable转换成Json格式  
            </summary>  
            <param name="dtSource">DataTable数据源</param>  
            <returns>json格式的数据表</returns>  
        </member>
        <member name="M:Beta.Utils.JsonHelper.FromJson(System.String)">
            <summary>
            将JSON字符串反序列化成对象
            </summary>
            <param name="value">要反序列化的JSON字符串</param>
            <returns>对象</returns>
        </member>
        <member name="M:Beta.Utils.JsonHelper.FromJson(System.String,System.Type)">
            <summary>
            将JSON字符串反序列化成对象
            </summary>
            <param name="value">要反序列化的JSON字符串</param>
            <param name="type">类型</param>
            <returns>传入类型的对象</returns>
        </member>
        <member name="M:Beta.Utils.JsonHelper.FromJson``1(System.String)">
            <summary>
            将JSON字符串反序列化成对象,注意：对象必须有无参数的构造函数，否则会丢出异常
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="jsonString">要反序列化的JSON字符串</param>
            <returns>反序列化的结果对象</returns>
        </member>
        <member name="M:Beta.Utils.JsonHelper.ObjectFromJson``1(System.String)">
            <summary>
            将JSON字符串反序列化成对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="jsonString">要反序列化的JSON字符串</param>
            <returns>反序列化的结果对象</returns>
        </member>
        <member name="M:Beta.Utils.JsonHelper.AnonymousFromJson``1(System.String,``0)">
            <summary>
            <para>Json解析为 匿名类对象</para>
            <para>用法：var r=AnonymousFromJson("{id:1}",new { id=0 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString">json字符串</param>
            <param name="anonymousTypeObject">匿名类对象（只取结构，初始值随意）</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.JsonHelper.GetValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            获取对象的属性值
            </summary>
            <param name="obj">对象</param>
            <param name="propertyInfo">属性信息</param>
            <returns>属性值</returns>
        </member>
        <member name="T:Beta.Utils.LogType">
            <summary>
            log类型，日志的级别顺序（低~高）：Debug，Info，Warn，Error，Fatal
            </summary>
        </member>
        <member name="F:Beta.Utils.LogType.Information">
            <summary>
            一般Log服务
            </summary>
        </member>
        <member name="F:Beta.Utils.LogType.Exception">
            <summary>
            错误处理
            </summary>
        </member>
        <member name="T:Beta.Utils.LogMsgLevel">
            <summary>
            日志级别，级别由高到低
            </summary>
        </member>
        <member name="F:Beta.Utils.LogMsgLevel.Fatal">
            <summary>
            致命错误信息
            </summary>
        </member>
        <member name="F:Beta.Utils.LogMsgLevel.Error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="F:Beta.Utils.LogMsgLevel.Warn">
            <summary>
            警告信息
            </summary>
        </member>
        <member name="F:Beta.Utils.LogMsgLevel.Info">
            <summary>
            通知信息
            </summary>
        </member>
        <member name="F:Beta.Utils.LogMsgLevel.Debug">
            <summary>
            调试信息
            </summary>
        </member>
        <member name="T:Beta.Utils.LogHelper">
            <summary>
            日志处理，提供有关日志处理的方法
            </summary>
        </member>
        <member name="M:Beta.Utils.LogHelper.Write(System.String)">
            <summary>
            写Log
            </summary>
            <param name="message">log内容</param>
        </member>
        <member name="M:Beta.Utils.LogHelper.Write(System.String,Beta.Utils.LogMsgLevel)">
            <summary>
            写Log
            </summary>
            <param name="message">log内容</param>
            <param name="logMsgLevel">log类型</param>
        </member>
        <member name="M:Beta.Utils.LogHelper.Write(System.String,System.Exception)">
            <summary>
            将异常错误信息写Log
            </summary>
            <param name="message">log内容</param>
            <param name="ex">异常对象</param>
        </member>
        <member name="M:Beta.Utils.LogHelper.Write(System.String,System.Exception,Beta.Utils.LogMsgLevel)">
            <summary>
            将异常错误信息写Log
            </summary>
            <param name="message">log内容</param>
            <param name="ex">异常对象</param>
            <param name="logMsgLevel">log类型</param>
        </member>
        <member name="M:Beta.Utils.LogHelper.WriteSystemLog(System.String)">
            <summary>
            写系统日志
            </summary>
            <param name="message">需要写入的信息</param>
        </member>
        <member name="M:Beta.Utils.LogHelper.WriteSystemLog(System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            写系统日志
            </summary>
            <param name="message">需要写入的信息</param>
            <param name="eventLogEntryType">日志类型</param>
        </member>
        <member name="M:Beta.Utils.LogHelper.WriteExceptionLog(System.String,System.Exception)">
            <summary>
            记录异常日志（统一格式，方便程序中的所有异常控制，程序中只需要传入方法名和异常信息则可）
            </summary>
            <param name="functionName">发生异常的方法名</param>
            <param name="ex">异常信息</param>
        </member>
        <member name="M:Beta.Utils.LogHelper.LogsHelper">
            <summary>
            初始化log4net
            </summary>
            <returns>ILog</returns>
        </member>
        <member name="T:Beta.Utils.OperationTimeSpanLoger">
            <summary>
            方法过程处理耗费时间统计类
            </summary>
        </member>
        <member name="M:Beta.Utils.OperationTimeSpanLoger.#ctor">
            <summary>
            无参构造函数，默认的统计方法为Unknown Operation
            </summary>
        </member>
        <member name="M:Beta.Utils.OperationTimeSpanLoger.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="operationName">需要记录日志的操作方法名称</param>
        </member>
        <member name="M:Beta.Utils.OperationTimeSpanLoger.Dispose">
            <summary>
            资源回收
            </summary>
        </member>
        <member name="T:Beta.Utils.ParseHelper">
            <summary>
            通用类型转换，提供类型转换处理方法
            </summary>
        </member>
        <member name="M:Beta.Utils.ParseHelper.Parse``1(System.Object,``0)">
            <summary>
            对Object进行指定类型的转换,当对象为空或转换错误时返回指定默认值
            注意：当Obj为字符类型但内容包含小数且T为整型时，转换错误。如："20.22" 转换为Int错误;而20.22转换为Int=20
            当Obj为数字且以科学计数法表示时转换为String会变为科学计数法，且精度丢失，所以建议用Decimal
            </summary>
            <typeparam name="T">支持类型：double,int,long,ushort,decimal,float,short,string,datetime,byte</typeparam>
            <param name="obj">需要转换的对象</param>
            <param name="defaultVal">默认值</param>
            <returns>T型的数据</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.Parse``1(System.Object)">
            <summary>
            对Object进行指定类型的转换,当对象为空或转换错误时返回默认值
            注意：当Obj为字符类型但内容包含小数且T为整型时，转换错误。如："20.22" 转换为Int错误;而20.22转换为Int=20
            当Obj为数字且以科学计数法表示时转换为String会变为科学计数法，且精度丢失，所以建议用Decimal
            </summary>
            <typeparam name="T">支持类型：double,int,long,ushort,decimal,float,short,string,datetime,byte</typeparam>
            <param name="obj">需要转换的对象</param>
            <returns>T型的数据</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.Parse(System.Object,System.Type)">
            <summary>
            对object进行指定类型的转换
            </summary>
            <param name="obj">需要转换的对象</param>
            <param name="covertToType">转换的类型</param>
            <returns>object</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.ParseIsNull``1(System.Object,``0,``0@)">
            <summary>
            对Object进行指定类型的转换,并判断转换结果是否为空，当对象为空或转换错误或与指定的NullVal相等时,返回true,Val为类型默认值
            </summary>
            <typeparam name="T">支持类型：double,int,long,ushort,decimal,float,short,string,datetime,byte</typeparam>
            <param name="obj">需要转换的对象</param>
            <param name="nullVal">空值标示</param>
            <param name="outValue">输出值</param>
            <returns>对象是否为空，true为空，false为非空</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.ParseEnum``1(System.Object,System.Boolean,``0)">
            <summary>
            枚举数据类型转换,可设置是否区分大小写,当对象为空或转换错误时返回指定默认值
            </summary>
            <typeparam name="T">支持枚举类型</typeparam>
            <param name="obj">要转换的对象</param>
            <param name="ignoreCase">忽略大小写</param>
            <param name="defaultVal">默认值</param>
            <returns>T型值</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.PareDateTimeToStr``1(``0)">
            <summary>
            日期换化为字符串，失败返回0
            </summary>
            <typeparam name="DateTime">DateTime类型</typeparam>
            <param name="date">日期参数</param>
            <returns>将日期字符串，转换失败后返回0</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.PareDateTimeToStr(System.DateTime)">
            <summary>
            日期换化为字符串，失败返回0
            </summary>
            <param name="date">日期参数</param>
            <returns>将日期字符串，转换失败后返回0</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.PareDateTimeToStr(System.DateTime,System.String)">
            <summary>
            日期换化为字符串
            </summary>
            <param name="obj">要转化的日期</param>
            <param name="format">日期格式:d,D,F,f,G,g,M,m,o,R,r,s,T,t,U,u,y,Y</param>
            <returns>特定日期格式的日期字符串</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.PareStrToDateTime``1(System.String)">
            <summary>
            字符串转化日期类型
            </summary>
            <typeparam name="String">string类型参数</typeparam>
            <param name="value">要转化的值</param>
            <returns>日期类型的值</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.PareStrToDateTime(System.String)">
            <summary>
            字符串转化日期类型
            </summary>
            <param name="value">要转化的值</param>
            <returns>日期类型的值</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.PareStrToDateTime``1(System.String,System.String)">
            <summary>
            将特定格式的字符串转换成日期型数据
            </summary>
            <typeparam name="String">String类型参数</typeparam>
            <param name="value">要转化的值</param>
            <param name="format">日期格式</param>
            <returns>用特定格式的字符串转换成的日期型数据</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.PareStrToDateTime(System.String,System.String)">
            <summary>
            将特定格式的字符串转换成日期型数据
            </summary>
            <param name="value">要转化的值</param>
            <param name="format">日期格式</param>
            <returns>用特定格式的字符串转换成的日期型数据</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.ParseEnum``1(System.Object,``0)">
            <summary>
            枚举数据类型转换,不区分大小写,当对象为空或转换错误时返回指定默认值
            </summary>
            <typeparam name="T">支持枚举类型</typeparam>
            <param name="obj">要转化的对象</param>
            <param name="defaultVal">默认值</param>
            <returns>T型数据</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.GetBaseDataType(System.String)">
            <summary>
            根据基本类型，返回系统类型
            </summary>
            <param name="baseType">基本类型，如：int，string</param>
            <returns>System.String、System.Boolean等系统格式的类型</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.ParseSqlType(System.String)">
            <summary>
            将数据库的表字段类型转换成.Net中的数据类型
            </summary>
            <param name="sqlBaseType">数据库的表字段类型</param>
            <returns>.Net中的数据类型</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.ReaderExists(System.Data.Common.DbDataReader,System.String)">
            <summary>
            判断 DataReader 里面是否包含指定的列
            </summary>
            <param name="dr"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.GetDefaultVal``1">
            <summary>
            获取默认值
            </summary>        
            <returns>T型数据的默认值</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.IsNumType(System.Type)">
            <summary>
            是否为空
            </summary>
            <param name="type">类型</param>
            <returns>是否为数据类型的值，true为是，false为不是</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.IsStringType(System.Type)">
            <summary>
            测试是否是string类型
            </summary>
            <param name="type">传入的type</param>
            <returns>true标示为string类型，否则不是</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.IsDateTimeType(System.Type)">
            <summary>
            测试是否是DateTime类型
            </summary>
            <param name="type">传入的type</param>
            <returns>true标示为datetime类型，否则不是</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.IsBoolType(System.Type)">
            <summary>
            测试是否是Bool类型
            </summary>
            <param name="type">传入的type</param>
            <returns>true标示为bool类型，否则不是</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.IsNull(System.Object)">
            <summary>
            判断一个对象是不是为空值
            </summary>
            <param name="obj">对象</param>
            <returns>true为空，false为非空对象</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.IsNull(System.Object,System.Boolean)">
            <summary>
            判断一个对象是不是为空值，并根据参数决定为空时是否抛异常
            </summary>
            <param name="obj">对象</param>
            <param name="isNullThrowException">为空时是否抛出异常</param>
            <returns>true为空，false为非空对象</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.Parse``1(System.Object,System.Type)">
            <summary>
            类型转换
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="obj">要转换的对象</param>
            <param name="type">类型</param>
            <returns>T型数据</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.ParseEnum``1(System.Object,System.Boolean,``0@)">
            <summary>
            枚举类型转换
            </summary>
            <typeparam name="T">要转换的枚举类型</typeparam>
            <param name="obj">要转换的枚举对象</param>
            <param name="ignoreCase">忽略大小写</param>
            <param name="val">输出值</param>
            <returns>true为转换成功，否则不成功</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.ParseDataTableToEntity``1(System.Data.DataTable)">
            <summary>
            将DataTable转换为实体
            </summary>
            <typeparam name="T">要转换的实体类型</typeparam>
            <param name="table">DataTable</param>
            <returns>实体</returns>
        </member>
        <member name="M:Beta.Utils.ParseHelper.ParseListEntityToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            把实体类转成DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:Beta.Utils.PinYinHelper">
            <summary>
            拼音处理类
            </summary>
        </member>
        <member name="F:Beta.Utils.PinYinHelper.FuXing">
            <summary>
            我国现存的复姓有88个
            </summary>
        </member>
        <member name="M:Beta.Utils.PinYinHelper.GetPinYin(System.String)">
            <summary>
            获得输入值的拼音
            </summary>
            <param name="chineseString">输入的汉字</param>
            <returns>拼音</returns>
        </member>
        <member name="M:Beta.Utils.PinYinHelper.GetFamilyName(System.String)">
            <summary>
            根据中文姓名获取姓氏，返回单字姓或双字复姓，非中文姓名返回空
            </summary>
            <returns></returns>
        </member>
        <member name="T:Beta.Utils.TOneHardWord">
            <summary>
            单词结构体
            </summary>
        </member>
        <member name="F:Beta.Utils.TOneHardWord.Value">
            <summary>
            汉字码
            </summary>
        </member>
        <member name="F:Beta.Utils.TOneHardWord.PYLetter">
            <summary>
            拼音字符
            </summary>
        </member>
        <member name="M:Beta.Utils.TOneHardWord.#ctor(System.UInt16,System.Char)">
            <summary>
            构造函数
            </summary>
            <param name="value">汉字码</param>
            <param name="pyLetter">拼音字符</param>
        </member>
        <member name="T:Beta.Utils.ReflecteHelper">
            <summary>
            反射处理类
            </summary>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.CreateInstance(System.Type,System.Object[])">
            <summary>
            创建指定类型的对象实例
            </summary>
            <param name="type">类型</param>
            <param name="args">构造函数参数</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.CreateInstance(System.String,System.String,System.Boolean,System.Object[])">
            <summary>
            从指定程序集中创建对象实例
            </summary>
            <param name="assemblyName">要创建类所在的程序集</param>
            <param name="className">要创建类的名称</param>
            <param name="ignoreCase">是否忽略要创建类名称的大小写</param>
            <param name="args">类创建的构造函数的参数</param>
            <returns>创建出的对象实例</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.CreateInstance(System.String,System.String,System.Object[])">
            <summary>
            从指定程序集中创建对象实例,本方法严格区分对象名称的大小写
            </summary>
            <param name="assemblyName">要创建类所在的程序集</param>
            <param name="className">要创建类的名称</param>
            <param name="args">类创建的构造函数的参数</param>
            <returns>创建出的对象实例</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.GetMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            取得类型特定名称和参数类型的函数（方法）
            </summary>
            <param name="type">类型</param>
            <param name="methodName">函数名称</param>
            <param name="bindingAttribute">A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted.  -or- Zero, to return null.</param>
            <param name="argTypes">参数类型数组，如果没有参数，传入null或者Type[0]都可以</param>
            <returns>特定函数MethodInfo</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.GetMethodParameter(System.Type,System.String)">
            <summary>
            获取方法的参数
            </summary>
            <param name="type">类型</param>
            <param name="methodName">函数名称</param>
            <returns>方法的参数列表</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.GetMethodParameter(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            获取方法的参数
            </summary>
            <param name="type">类型</param>
            <param name="methodName">函数名称</param>
            <param name="bindingAttribute">A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted.  -or- Zero, to return null</param>
            <returns>方法的参数列表</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.IsMethodExist(System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            检查类型是否存在特定名称和参数类型的函数（方法）
            </summary>
            <param name="type">类型</param>
            <param name="methodName">函数名称</param>
            <param name="bindingAttribute">A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted.  -or- Zero, to return null.</param>
            <param name="argTypes">参数类型数组，如果没有参数，传入null或者Type[0]都可以</param>
            <returns>是否存在特定函数</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.IsInstancePublicMethodExist(System.Type,System.String,System.Type[])">
            <summary>
            检查类型是否存在特定名称和参数类型的成员公开函数（方法）
            </summary>
            <param name="type">类型</param>
            <param name="methodName">函数名称</param>
            <param name="argTypes">参数类型数组，如果没有参数，传入null或者Type[0]都可以</param>
            <returns>是否存在特定函数</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.IsInstancePublicMethodExist(System.Object,System.String,System.Type[])">
            <summary>
            检查对象是否存在特定名称和参数类型的成员公开函数（方法）
            </summary>
            <param name="instance">对象实例</param>
            <param name="methodName">函数名称</param>
            <param name="argTypes">参数类型数组，如果没有参数，传入null或者Type[0]都可以</param>
            <returns>是否存在特定函数</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.IsInstancePublicMethodExist(System.String,System.String,System.Boolean,System.String,System.Type[])">
            <summary>
            检查类是否存在特定名称和参数类型的成员公开函数（方法）
            </summary>
            <param name="assemblyName">类所在的程序集</param>
            <param name="className">类的名称</param>
            <param name="ignoreCase">是否忽略类名称的大小写</param>
            <param name="methodName">函数名称</param>
            <param name="argTypes">参数类型数组，如果没有参数，传入null或者Type[0]都可以</param>
            <returns>是否存在特定函数</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.GetAssembly(System.String,System.String)">
            <summary>
            取程序集，如果有缓存，直接从缓存取，如果没有，则载入
            </summary>
            <param name="cacheName">指定缓存名称</param>
            <param name="assemblyName">载入的程序集</param>
            <returns>程序集</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.IsInstancePublicMethodExist(System.String,System.String,System.String,System.Type[])">
            <summary>
            检查类是否存在特定名称和参数类型的成员公开函数（方法），类名大小写敏感
            </summary>
            <param name="assemblyName">类所在的程序集</param>
            <param name="className">类的名称</param>
            <param name="methodName">函数名称</param>
            <param name="argTypes">参数类型数组，如果没有参数，传入null或者Type[0]都可以</param>
            <returns>是否存在特定函数</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.IsStaticPublicMethodExist(System.Type,System.String,System.Type[])">
            <summary>
            检查类是否存在特定名称和参数类型的静态公开函数（方法）
            </summary>
            <param name="type">类型</param>
            <param name="methodName">函数名称</param>
            <param name="argTypes">参数类型数组，如果没有参数，传入null或者Type[0]都可以</param>
            <returns>是否存在特定函数</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.IsStaticPublicMethodExist(System.String,System.String,System.Boolean,System.String,System.Type[])">
            <summary>
            检查类是否存在特定名称和参数类型的静态公开函数（方法）
            </summary>
            <param name="assemblyName">类所在的程序集</param>
            <param name="className">类的名称</param>
            <param name="ignoreCase">是否忽略类名称的大小写</param>
            <param name="methodName">函数名称</param>
            <param name="argTypes">参数类型数组，如果没有参数，传入null或者Type[0]都可以</param>
            <returns>是否存在特定静态函数</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.IsStaticPublicMethodExist(System.String,System.String,System.String,System.Type[])">
            <summary>
            检查类是否存在特定名称和参数类型的静态公开函数（方法），类名大小写敏感
            </summary>
            <param name="assemblyName">类所在的程序集</param>
            <param name="className">类的名称</param>
            <param name="methodName">函数名称</param>
            <param name="argTypes">参数类型数组，如果没有参数，传入null或者Type[0]都可以</param>
            <returns>是否存在特定静态函数</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.InvokeMethod(System.Type,System.Object,System.String,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            执行传入类型或对象的指定名称和参数的方法，并返回执行结果
            </summary>
            <param name="type">要执行方法的类型</param>
            <param name="_Object">要执行方法的对象</param>
            <param name="methodName">要执行的方法名称，严格区分大小写</param>
            <param name="bindingAttribute">A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted.  -or- Zero, to return null.</param>
            <param name="args">要执行的方法的参数集</param>
            <returns>执行成功,返回此方法的执行结果，不成功，丢出AppException异常,或函数执行时的异常</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            执行传入对象的指定名称和参数的方法，并返回执行结果
            </summary>
            <param name="instance">要执行方法的对象</param>
            <param name="methodName">要执行的方法名称，严格区分大小写</param>
            <param name="args">要执行的方法的参数集</param>
            <returns>
            执行成功,返回此方法的执行结果，不成功，丢出AppException异常,或函数执行时的异常
            </returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.InvokeMethod(System.Type,System.String,System.Object[])">
            <summary>
            执行传入类型的指定名称和参数的静态方法，并返回执行结果
            </summary>
            <param name="type">要执行方法的类型</param>
            <param name="methodName">要执行的方法名称，严格区分大小写</param>
            <param name="args">要执行的方法的参数集</param>
            <returns>执行成功,返回此方法的执行结果，不成功，丢出AppException异常,或函数执行时的异常
            </returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.InvokeMethod(System.String,System.String,System.Boolean,System.String,System.Object[])">
            <summary>
             从指定程序集的指定类中，执行指定的静态方法,并返回函数执行的结果
            </summary>
            <param name="assemblyName">要创建类所在的程序集</param>
            <param name="className">要创建类的名称</param>
            <param name="ignoreCase">是否忽略类名称的大小写</param>
            <param name="methodName">要执行的方法名称</param>
            <param name="args">要执行的方法的参数集</param>
            <returns>
            执行成功,返回此方法的执行结果，不成功，丢出AppException异常,或函数执行时的异常
            </returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.InvokeMethod(System.String,System.String,System.String,System.Object[])">
            <summary>
             从指定程序集的指定类中，执行指定的静态方法,并返回函数执行的结果,类名称严格区分大小写,函数名称严格区分大小写.
            </summary>
            <param name="assemblyName">类所在的程序集</param>
            <param name="className">类的名称</param>
            <param name="methodName">要执行的方法名称</param>
            <param name="args">要执行的方法的参数集</param>
            <returns>
            执行成功,返回此方法的执行结果，不成功，丢出AppException异常,或函数执行时的异常
            </returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.CopyProperties(System.Object,System.Object)">
            <summary>
            将原对象的属性复制到目标对象的属性上，也可以将IDictionary对象的key作为目标对象的属性进行复制。不支持嵌套复制属性
            映射规则：属性名相同且类型相同(CaseSensitive)
            </summary>
            <param name="destObject">目标对象</param>
            <param name="srcObject">源对象</param>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.SetProperty(System.Object,System.String,System.Object,System.Object[])">
            <summary>
            在指定对象指定属性上设置值。
            属性支持嵌套.( bean.prop1.prop2.prop3 )
            </summary>
            <param name="obj">对象</param>
            <param name="propName">属性名</param>
            <param name="value">值</param>
            <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
            <returns>true:设置成功; false:设置失败</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.GetProperty(System.Object,System.String,System.Object[])">
            <summary>
            获取指定对象属性的值。
            属性支持嵌套.( bean.prop1.prop2.prop3 )
            </summary>
            <param name="obj">对象</param>
            <param name="propName">属性名</param>
            <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
            <returns>属性的值。[ 如果没有获取则返回null ]</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.GetPropertyInfo(System.Object,System.String,System.Object[])">
            <summary>
            获取指定对象属性信息。
            属性支持嵌套.( bean.prop1.prop2.prop3 )
            </summary>
            <param name="obj">对象</param>
            <param name="propName">属性名</param>
            <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
            <returns>属性描述信息。[ 如果没有获取则返回null ]</returns>
        </member>
        <member name="M:Beta.Utils.ReflecteHelper.IsPropertyExist(System.Object,System.String,System.Object[])">
            <summary>
            指定对象属性是否存在。
            属性支持嵌套.( bean.prop1.prop2.prop3 )
            </summary>
            <param name="obj">对象</param>
            <param name="propName">属性名</param>
            <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
            <returns>true:存在; false:不存在</returns>
        </member>
        <member name="T:Beta.Utils.ReflectionHelper">
            <summary>
            反射处理类
            </summary>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.CreateInstance(System.Type,System.Object[])">
            <summary>
            创建指定类型的对象实例
            </summary>
            <param name="type">类型</param>
            <param name="args">构造函数参数</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.CreateInstance(System.String,System.String,System.Boolean,System.Object[])">
            <summary>
            从指定程序集中创建对象实例
            </summary>
            <param name="assemblyName">要创建类所在的程序集</param>
            <param name="className">要创建类的名称</param>
            <param name="ignoreCase">是否忽略要创建类名称的大小写</param>
            <param name="args">类创建的构造函数的参数</param>
            <returns>创建出的对象实例</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.CreateInstance(System.String,System.String,System.Object[])">
            <summary>
            从指定程序集中创建对象实例,本方法严格区分对象名称的大小写
            </summary>
            <param name="assemblyName">要创建类所在的程序集</param>
            <param name="className">要创建类的名称</param>
            <param name="args">类创建的构造函数的参数</param>
            <returns>创建出的对象实例</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.GetMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            取得类型特定名称和参数类型的函数（方法）
            </summary>
            <param name="type">类型</param>
            <param name="methodName">函数名称</param>
            <param name="bindingAttribute">A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted.  -or- Zero, to return null.</param>
            <param name="argTypes">参数类型数组，如果没有参数，传入null或者Type[0]都可以</param>
            <returns>特定函数MethodInfo</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.GetMethodParameter(System.Type,System.String)">
            <summary>
            获取方法的参数
            </summary>
            <param name="type">类型</param>
            <param name="methodName">函数名称</param>
            <returns>方法的参数列表</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.GetMethodParameter(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            获取方法的参数
            </summary>
            <param name="type">类型</param>
            <param name="methodName">函数名称</param>
            <param name="bindingAttribute">A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted.  -or- Zero, to return null</param>
            <returns>方法的参数列表</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.IsMethodExist(System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            检查类型是否存在特定名称和参数类型的函数（方法）
            </summary>
            <param name="type">类型</param>
            <param name="methodName">函数名称</param>
            <param name="bindingAttribute">A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted.  -or- Zero, to return null.</param>
            <param name="argTypes">参数类型数组，如果没有参数，传入null或者Type[0]都可以</param>
            <returns>是否存在特定函数</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.IsInstancePublicMethodExist(System.Type,System.String,System.Type[])">
            <summary>
            检查类型是否存在特定名称和参数类型的成员公开函数（方法）
            </summary>
            <param name="type">类型</param>
            <param name="methodName">函数名称</param>
            <param name="argTypes">参数类型数组，如果没有参数，传入null或者Type[0]都可以</param>
            <returns>是否存在特定函数</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.IsInstancePublicMethodExist(System.Object,System.String,System.Type[])">
            <summary>
            检查对象是否存在特定名称和参数类型的成员公开函数（方法）
            </summary>
            <param name="instance">对象实例</param>
            <param name="methodName">函数名称</param>
            <param name="argTypes">参数类型数组，如果没有参数，传入null或者Type[0]都可以</param>
            <returns>是否存在特定函数</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.IsInstancePublicMethodExist(System.String,System.String,System.Boolean,System.String,System.Type[])">
            <summary>
            检查类是否存在特定名称和参数类型的成员公开函数（方法）
            </summary>
            <param name="assemblyName">类所在的程序集</param>
            <param name="className">类的名称</param>
            <param name="ignoreCase">是否忽略类名称的大小写</param>
            <param name="methodName">函数名称</param>
            <param name="argTypes">参数类型数组，如果没有参数，传入null或者Type[0]都可以</param>
            <returns>是否存在特定函数</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.GetAssembly(System.String)">
            <summary>
            取程序集，如果有缓存，直接从缓存取，如果没有，则载入
            </summary>
            <param name="cacheName">指定缓存名称</param>
            <param name="assemblyName">载入的程序集</param>
            <returns>程序集</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.IsInstancePublicMethodExist(System.String,System.String,System.String,System.Type[])">
            <summary>
            检查类是否存在特定名称和参数类型的成员公开函数（方法），类名大小写敏感
            </summary>
            <param name="assemblyName">类所在的程序集</param>
            <param name="className">类的名称</param>
            <param name="methodName">函数名称</param>
            <param name="argTypes">参数类型数组，如果没有参数，传入null或者Type[0]都可以</param>
            <returns>是否存在特定函数</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.IsStaticPublicMethodExist(System.Type,System.String,System.Type[])">
            <summary>
            检查类是否存在特定名称和参数类型的静态公开函数（方法）
            </summary>
            <param name="type">类型</param>
            <param name="methodName">函数名称</param>
            <param name="argTypes">参数类型数组，如果没有参数，传入null或者Type[0]都可以</param>
            <returns>是否存在特定函数</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.IsStaticPublicMethodExist(System.String,System.String,System.Boolean,System.String,System.Type[])">
            <summary>
            检查类是否存在特定名称和参数类型的静态公开函数（方法）
            </summary>
            <param name="assemblyName">类所在的程序集</param>
            <param name="className">类的名称</param>
            <param name="ignoreCase">是否忽略类名称的大小写</param>
            <param name="methodName">函数名称</param>
            <param name="argTypes">参数类型数组，如果没有参数，传入null或者Type[0]都可以</param>
            <returns>是否存在特定静态函数</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.IsStaticPublicMethodExist(System.String,System.String,System.String,System.Type[])">
            <summary>
            检查类是否存在特定名称和参数类型的静态公开函数（方法），类名大小写敏感
            </summary>
            <param name="assemblyName">类所在的程序集</param>
            <param name="className">类的名称</param>
            <param name="methodName">函数名称</param>
            <param name="argTypes">参数类型数组，如果没有参数，传入null或者Type[0]都可以</param>
            <returns>是否存在特定静态函数</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.InvokeMethod(System.Type,System.Object,System.String,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            执行传入类型或对象的指定名称和参数的方法，并返回执行结果
            </summary>
            <param name="type">要执行方法的类型</param>
            <param name="obj">要执行方法的对象</param>
            <param name="methodName">要执行的方法名称，严格区分大小写</param>
            <param name="bindingAttribute">A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted.  -or- Zero, to return null.</param>
            <param name="args">要执行的方法的参数集</param>
            <returns>执行成功,返回此方法的执行结果，不成功，丢出AppException异常,或函数执行时的异常</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.InvokeMethod(System.Type,System.Object,System.String,System.Reflection.BindingFlags,System.Type[],System.Object[])">
            <summary>
            执行传入类型或对象的指定名称和参数的方法，并返回执行结果
            </summary>
            <param name="type">要执行方法的类型</param>
            <param name="obj">要执行方法的对象</param>
            <param name="methodName">要执行的方法名称，严格区分大小写</param>
            <param name="bindingAttribute">A bitmask comprised of one or more System.Reflection.BindingFlags that specify how the search is conducted.  -or- Zero, to return null.</param>
            <param name="argTypes">要执行的方法的参数类型集</param>
            <param name="args">要执行的方法的参数集</param>
            <returns>执行成功,返回此方法的执行结果，不成功，丢出AppException异常,或函数执行时的异常</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            执行传入对象的指定名称和参数的方法，并返回执行结果
            </summary>
            <param name="instance">要执行方法的对象</param>
            <param name="methodName">要执行的方法名称，严格区分大小写</param>
            <param name="args">要执行的方法的参数集</param>
            <returns>
            执行成功,返回此方法的执行结果，不成功，丢出AppException异常,或函数执行时的异常
            </returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.InvokeMethod(System.Object,System.String,System.Type[],System.Object[])">
            <summary>
            执行传入对象的指定名称和参数的方法，并返回执行结果
            </summary>
            <param name="instance">要执行方法的对象</param>
            <param name="methodName">要执行的方法名称，严格区分大小写</param>
            <param name="argTypes">要执行的方法的参数类型集</param>
            <param name="args">要执行的方法的参数集</param>
            <returns>
            执行成功,返回此方法的执行结果，不成功，丢出AppException异常,或函数执行时的异常
            </returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.InvokeMethod(System.Type,System.String,System.Object[])">
            <summary>
            执行传入类型的指定名称和参数的静态方法，并返回执行结果
            </summary>
            <param name="type">要执行方法的类型</param>
            <param name="methodName">要执行的方法名称，严格区分大小写</param>
            <param name="args">要执行的方法的参数集</param>
            <returns>执行成功,返回此方法的执行结果，不成功，丢出AppException异常,或函数执行时的异常
            </returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.InvokeMethod(System.String,System.String,System.Boolean,System.String,System.Object[])">
            <summary>
             从指定程序集的指定类中，执行指定的静态方法,并返回函数执行的结果
            </summary>
            <param name="assemblyName">要创建类所在的程序集</param>
            <param name="className">要创建类的名称</param>
            <param name="ignoreCase">是否忽略类名称的大小写</param>
            <param name="methodName">要执行的方法名称</param>
            <param name="args">要执行的方法的参数集</param>
            <returns>
            执行成功,返回此方法的执行结果，不成功，丢出AppException异常,或函数执行时的异常
            </returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.InvokeMethod(System.String,System.String,System.String,System.Object[])">
            <summary>
             从指定程序集的指定类中，执行指定的静态方法,并返回函数执行的结果,类名称严格区分大小写,函数名称严格区分大小写.
            </summary>
            <param name="assemblyName">类所在的程序集</param>
            <param name="className">类的名称</param>
            <param name="methodName">要执行的方法名称</param>
            <param name="args">要执行的方法的参数集</param>
            <returns>
            执行成功,返回此方法的执行结果，不成功，丢出AppException异常,或函数执行时的异常
            </returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.CopyProperties(System.Object,System.Object)">
            <summary>
            将原对象的属性复制到目标对象的属性上，也可以将IDictionary对象的key作为目标对象的属性进行复制。不支持嵌套复制属性
            映射规则：属性名相同且类型相同(CaseSensitive)
            </summary>
            <param name="destObject">目标对象</param>
            <param name="srcObject">源对象</param>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.SetProperty(System.Object,System.String,System.Object,System.Object[])">
            <summary>
            在指定对象指定属性上设置值。
            属性支持嵌套.( bean.prop1.prop2.prop3 )
            </summary>
            <param name="obj">对象</param>
            <param name="propName">属性名</param>
            <param name="value">值</param>
            <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
            <returns>true:设置成功; false:设置失败</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.GetProperty(System.Object,System.String,System.Object[])">
            <summary>
            获取指定对象属性的值。
            属性支持嵌套.( bean.prop1.prop2.prop3 )
            </summary>
            <param name="obj">对象</param>
            <param name="propName">属性名</param>
            <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
            <returns>属性的值。[ 如果没有获取则返回null ]</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.GetPropertyInfo(System.Object,System.String,System.Object[])">
            <summary>
            获取指定对象属性信息。
            属性支持嵌套.( bean.prop1.prop2.prop3 )
            </summary>
            <param name="obj">对象</param>
            <param name="propName">属性名</param>
            <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
            <returns>属性描述信息。[ 如果没有获取则返回null ]</returns>
        </member>
        <member name="M:Beta.Utils.ReflectionHelper.IsPropertyExist(System.Object,System.String,System.Object[])">
            <summary>
            指定对象属性是否存在。
            属性支持嵌套.( bean.prop1.prop2.prop3 )
            </summary>
            <param name="obj">对象</param>
            <param name="propName">属性名</param>
            <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
            <returns>true:存在; false:不存在</returns>
        </member>
        <member name="T:Beta.Utils.RemotingHelper">
            <summary>
            Remoting帮助类
            </summary>
        </member>
        <member name="M:Beta.Utils.RemotingHelper.GetObjectUrl(System.String)">
            <summary>
            根据对象类型名称从配置项中获取远程对象URL
            </summary>
            <param name="typeName">类型名</param>
            <returns>获取远程对象URL</returns>
        </member>
        <member name="M:Beta.Utils.RemotingHelper.GetObject``1(System.String)">
            <summary>
            获取远程Remoting对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="serverAddress">Remoting服务地址</param>
            <returns>Remoting对象</returns>
        </member>
        <member name="M:Beta.Utils.RemotingHelper.GetObjectWithNameSpace``1(System.String)">
            <summary>
            获取远程Remoting对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="classname">classname</param>
            <returns>Remoting对象</returns>
        </member>
        <member name="M:Beta.Utils.RemotingHelper.Register(System.Type,System.Int32,System.String,System.String)">
            <summary>
            Remoting 注册远程对象[Singleton]模式
            </summary>
            <param name="type">类型</param>
            <param name="serverPort">端口</param>
            <param name="serverName">名称</param>
            <param name="serviceName">服务名</param>
        </member>
        <member name="T:Beta.Utils.StackTraceHelper">
            <summary>
            堆栈跟踪类
            </summary>
        </member>
        <member name="M:Beta.Utils.StackTraceHelper.TrackParentStackTrace(System.Int32)">
            <summary>
            父调用者的堆栈跟踪
            </summary>
            <param name="topFrame">往上层数</param>
            <returns></returns>
        </member>
        <member name="T:Beta.Utils.StringHelper">
            <summary>
            字符操作函数集合类
            </summary>
        </member>
        <member name="M:Beta.Utils.StringHelper.SubstringAfter(System.String,System.String)">
            <summary>
            获取指定分隔符第一次出现以后的子字符串
            </summary>
            <param name="str">字符串</param>
            <param name="separator">分隔符</param>
            <returns>指定分隔符第一次出现以后的子字符串</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.Join(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            将集合中的项通过Separator组合成字符串
            </summary>
            <param name="strList">集合参数</param>
            <param name="separator">分隔符</param>
            <returns>通过Separator组合成的字符串</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.CutStringValue(System.String,System.Int32)">
            <summary>
            截取固定长度的字符串
            </summary>
            <param name="content">需要截取的内容</param>
            <param name="length">截取的长度</param>
            <returns>截取的结果</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.CutStringValue(System.String,System.Int32,System.String)">
            <summary>
            截取固定长度的字符串并拼接一段内容
            </summary>
            <param name="content">需要截取的内容</param>
            <param name="length">截取的长度</param>
            <param name="elipse">拼接的内容</param>
            <returns>截取后且拼接好的内容</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.SplitString(System.String,System.Char,System.Char)">
            <summary>
            根据两个分隔符分隔字符串
            </summary>
            <param name="str"></param>
            <param name="separator1"></param>
            <param name="separator2"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.SplitString(System.String,System.StringComparer,System.Char,System.Char)">
            <summary>
            根据两个分隔符分隔字符串
            </summary>
            <param name="str"></param>
            <param name="separator1"></param>
            <param name="separator2"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.SplitString(System.String,System.String)">
            <summary>
            取得分割后的字符串数据,数组以0开始
            </summary>
            <param name="str">字符串</param>
            <param name="separator">分割符</param>
            <returns>返回分割后的字符串数组</returns>
            <example>string str=Split("rrrrddrew@@tqwewerewddccc@@", "@@")[1].ToString()</example>
        </member>
        <member name="M:Beta.Utils.StringHelper.ReplacePos(System.String,System.Int32,System.String)">
            <summary>
            把指定位置的字符替换，常用于局部显示*号
            </summary>
            <param name="text"></param>
            <param name="pos"></param>
            <param name="replacetext"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.IndexOf(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            判断指定字符串是否在集合中,如果在,返回Index,不在,返回-1,不区分大小写
            </summary>
            <param name="val">字符串</param>
            <param name="strList">字符串集合参数</param>
            <returns>指定字符串在集合中的索引,如果在,返回Index,不在,返回-1,不区分大小写</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.IndexOf(System.String,System.String[],System.Boolean)">
            <summary>
            判断指定字符串是否在集合中,如果在,返回Index,不在,返回-1,可设置是否区分大小写
            </summary>
            <param name="val">字符串</param>
            <param name="strs">字符串数组</param>
            <param name="isIgnoreCase">忽略大小写</param>
            <returns>可以区分大小写的指定字符串在集合中的索引,如果在,返回Index,不在,返回-1</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.IndexOfPartial(System.String,System.String[],System.Boolean)">
            <summary>
            判断指定字符串是否包含在集合的某项中,如果在,返回Index,不在,返回-1,可区分大小写
            </summary>
            <param name="value">字符串</param>
            <param name="arrayValue">字符串数组</param>
            <param name="isIgnoreCase">忽略大小写</param>
            <returns>可以区分大小写的指定字符串在数组中的索引,如果在,返回Index,不在,返回-1</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.IndexOfPartial(System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            判断指定字符串是否包含在集合的某项中,如果在,返回Index,不在,返回-1,可区分大小写
            </summary>
            <param name="value">字符串</param>
            <param name="listValue">字符串数组</param>
            <param name="isIgnoreCase">忽略大小写</param>
            <returns>可以区分大小写的指定字符串在集合中的某一项的索引,如果在,返回Index,不在,返回-1</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.InDict``1(System.String,System.Collections.Generic.Dictionary{``0,System.String},System.Boolean,``0@)">
            <summary>
            判断指定字符串是否在字典中,如果在,返回true,并设置Key,不在,返回false,可设置是否区分大小写
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">字符串</param>
            <param name="strDict">字典集合</param>
            <param name="isIgnoreCase">忽略大小写</param>
            <param name="key">key值</param>
            <returns>可以区分大小写的指定字符串是否等于字典的key,如果在,返回true,并设置Key,不在,返回false</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.InDictPartial``1(System.String,System.Collections.Generic.Dictionary{``0,System.String},System.Boolean,``0@)">
            <summary>
            判断指定字符串是否包含在字典的某项中,如果在,返回true,并设置Key,不在,返回false,可设置是否区分大小写
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">字符串</param>
            <param name="strDict">字典集合</param>
            <param name="isIgnoreCase">忽略大小写</param>
            <param name="key">key值</param>
            <returns>可以区分大小写的指定字符串是否在字典中,如果在,返回true,并设置Key,不在,返回false</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.SubStrBySingleByte(System.String,System.Int32)">
            <summary>
            根据汉字占两个字节，英文占一个字节的规则截取指定长度字符串（超过部分用"..."替换）
            </summary>
            <param name="originalString">要传入的字符串</param>
            <param name="Length">截取长度</param>
            <returns>根据汉字占两个字节，英文占一个字节的规则截取指定长度字符串（超过部分用"..."替换）后的值</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.GetSingleByteLengthOfString(System.String)">
            <summary>
            获取字符串长度
            </summary>
            <param name="ss">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.len(System.String)">
            <summary>
            获取字符串的长度
            </summary>
            <param name="value">字符串值</param>
            <returns>长度</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.ConvertListToString(System.Collections.Generic.List{System.String},System.Char)">
            <summary>
            将List的值按传入的分隔符转成字符串
            </summary>
            <param name="listValue">List值集</param>
            <param name="separator">分隔符</param>
            <returns>格式化后的字符串值</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.ConvertListToString(System.Collections.IList,System.Char)">
            <summary>
            将IList类型的值按传入的分隔符转成字符串
            </summary>
            <param name="listValue">IList值</param>
            <param name="separator">分隔符</param>
            <returns>格式化后的字符串值</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.ConvertToString(System.Object)">
            <summary>
            将对象转成字符串
            </summary>
            <param name="obj">对象</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.ConvertToString(System.Object,System.Boolean)">
            <summary>
            将对象转成字符串
            </summary>
            <param name="obj">对象</param>
            <param name="isNullThrowException">为空时是否抛出异常标示</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.ConvertToString(System.String[],System.Char)">
            <summary>
            将字符串数组按分隔符转成字符串
            </summary>
            <param name="arrayValue">字符串数组</param>
            <param name="split">分隔符</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.ConvertToString(System.Object,System.String)">
            <summary>
            将对象转成字符串，发生异常时返回默认值
            </summary>
            <param name="obj">对象</param>
            <param name="defaultVallue">默认值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.ConvertToString(System.Object,System.Boolean,System.String)">
            <summary>
            将对象转换成字符串，并根据参数决定是否抛出异常，同时返回传入的默认值
            </summary>
            <param name="obj">对象</param>
            <param name="isNullThrowException">为空时是否抛出异常标示</param>
            <param name="defaultVallue">默认值</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.ModifyVersion(System.String)">
            <summary>
            把版本号统一格式为类似5.12
            </summary>
            <param name="vers"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.IsValidEmail(System.String)">
            <summary>
            Email地址
            </summary>
            <param name="input">需要验证的内容</param>
            <returns>是否为合法的字符串，true为合法，false为非法</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.IsValidDecimal(System.String)">
            <summary>
            验证是否为小数
            </summary>
            <param name="input">需要验证的内容</param>
            <returns>是否为合法的小数，true为合法，false为非法</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.IsValidTel(System.String)">
            <summary>
            验证是否为电话号码 
            </summary>
            <param name="input">需要验证的内容</param>
            <returns>是否为合法的电话号码，true为合法，false为非法</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.IsValidMobilePhone(System.String)">
            <summary>
            验证是否为手机号码 
            </summary>
            <param name="input">需要验证的内容</param>
            <returns>是否为合法的手机号码，true为合法，false为非法</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.IsValidDate(System.String)">
            <summary>
            验证年月日，YYYY-MM-DD格式 
            </summary>
            <param name="input">需要验证的内容</param>
            <returns>是否为合法的日期，true为合法，false为非法</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.IsIDCard(System.String)">
            <summary>
            验证是否是身份证号码
            </summary>
            <param name="input">需要验证的内容</param>
            <returns>是否为合法的身份证号码，true为合法，false为非法</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.IsValidPostfix(System.String)">
            <summary>
            验证后缀名的格式是否为gif和jpg
            </summary>
            <param name="input">需要验证的内容</param>
            <returns>验证文件的后缀名是否为gif或者jpg格式，true为合法，false为非法</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.IsValidIp(System.String)">
            <summary>
            验证IP
            </summary>
            <param name="input">需要验证的内容</param>
            <returns>是否为合法的IP地址，true为合法，false为非法</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.IsNum(System.String)">
            <summary>
            验证数字格式是否合法
            </summary>
            <param name="input">需要验证的内容</param>
            <returns>是否为合法的数字，true为合法，false为非法</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.IsChar(System.String)">
            <summary>
            验证英文字符是否为合法的英文字母
            </summary>
            <param name="input">需要验证的内容</param>
            <returns>是否为合法的英文字母，true为合法，false为非法</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.IsChinese(System.String)">
            <summary>
            验证输入是否为汉字
            </summary>
            <param name="input">需要验证的内容</param>
            <returns>是否为汉字，true为是，false为非汉字</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.IsUrl(System.String)">
            <summary>
            验证网址是否合法
            </summary>
            <param name="input">需要验证的内容</param>
            <returns>是否为合法的网址，true为合法，false为非法</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.IsHTML(System.String)">
            <summary>
            验证输入是否为HTML标签
            </summary>
            <param name="input">需要验证的内容</param>
            <returns>是否为html标签，true为合法，false为非法</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.FormatToHtml(System.String)">
            <summary>
            格式化为html，将\t\n等等内容替换成相应的html标签
            </summary>
            <param name="text">需要格式化的内容</param>
            <returns>格式化后的html</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Beta.Utils.StringHelper.FormatToText(System.String)" -->
        <member name="M:Beta.Utils.StringHelper.ClearHtmlCode(System.String)">
            <summary>
            清除字符串HTML
            </summary>
            <param name="text">字符串内容</param>
            <returns>清除html标签后的结果</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.ClearMultiSpaces(System.String)">
            <summary>
            清除重复两次或以上的空字符串
            </summary>
            <param name="text">字符串内容</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.ClearHtmlCodeWithoutSpaces(System.String)">
            <summary>
            清除字符串HTML，但不清除重复的空字符串，包括危险字符的转义
            </summary>
            <param name="text">字符串内容</param>
            <returns>清除html标签后的结果</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.FormatJsSymbol(System.String)">
            <summary>
            将js中的特殊字符转义
            </summary>
            <param name="jsValue">需要格式化的内容</param>
            <returns>格式化后的内容</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.FormatSQLSingleQuotes(System.String)">
            <summary>
            将Sql中的单引号格式化
            </summary>
            <param name="sqlValue">需要格式化的内容</param>
            <returns>格式化后的值</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.FormatHTMLMultiLine(System.String)">
            <summary>
            将内容中的换行符替换成Html的换行符
            </summary>
            <param name="content">需要格式化的内容</param>
            <returns>格式化后的值</returns>
        </member>
        <member name="M:Beta.Utils.StringHelper.AreaNameProcess(System.String)">
            <summary>
            地区名称简化处理
            </summary>
            <param name="areaName"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.IDCard.GetGenderCode">
            获取身份证的第17位，奇数为男性，偶数为女性
            
            @return
        </member>
        <member name="F:Beta.Utils.IDCard.VERIFY_CODE">
            18位身份证中最后一位校验码
        </member>
        <member name="F:Beta.Utils.IDCard.VERIFY_CODE_WEIGHT">
            18位身份证中，各个数字的生成校验码时的权值
        </member>
        <!-- Badly formed XML comment ignored for member "M:Beta.Utils.IDCard.CalculateVerifyCode(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Beta.Utils.IDCard.ContertToNewCardNumber(System.String)" -->
        <member name="T:Beta.Utils.TextSimilarHelper">
            <summary>
            两短文本相似度算法
            区别Beta.NewsService.Interface.TextSimilar.GetSimilarity方法，那个只对中文单个字符进行统计，这里考虑到数字，这个方法性能要低，对于较短文本并带有数字的使用此方法更准确
            http://www.ruanyifeng.com/blog/2013/03/cosine_similarity.html
            http://my.oschina.net/BreathL/blog/42477?fromerr=Q5ARq3nQ
            </summary>
        </member>
        <member name="T:Beta.Utils.Web.CacheHelper">
            <summary>
            缓存处理类
            </summary>
        </member>
        <member name="T:Beta.Utils.Web.CacheHelper.WebCacheAction">
            <summary>
            填充缓存的方法委托
            </summary>
            <returns>事件委托</returns>
        </member>
        <member name="M:Beta.Utils.Web.CacheHelper.GetCache(System.String)">
            <summary>
            读取缓存
            </summary>
            <param name="cacheKey">key名</param>
            <returns>缓存对象</returns>
        </member>
        <member name="M:Beta.Utils.Web.CacheHelper.GetCache(System.String,System.DateTime,Beta.Utils.Web.CacheHelper.WebCacheAction)">
            <summary>
            读取缓存
            </summary>
            <param name="cacheKey">缓存ID</param>
            <param name="expire">过期时间</param>
            <param name="action">当缓存为空时的动作</param>
            <returns>从缓存中读取的对象</returns>
        </member>
        <member name="M:Beta.Utils.Web.CacheHelper.SetCache(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="cacheKey">key名</param>
            <param name="objObject">要被缓存的对象</param>
        </member>
        <member name="M:Beta.Utils.Web.CacheHelper.SetCache(System.String,System.Object,System.DateTime)">
            <summary>
            设置缓存
            </summary>
            <param name="cacheKey">key名</param>
            <param name="objObject">要被缓存的对象</param>
            <param name="expire">过期时间</param>
        </member>
        <member name="M:Beta.Utils.Web.CacheHelper.SetCache(System.String,System.Object,System.DateTime,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            设置缓存
            </summary>
            <param name="cacheKey">key名</param>
            <param name="objObject">要被缓存的对象</param>
            <param name="expire">过期时间</param>
            <param name="cacheItemRemovedCallback">缓存过期后的回调事件</param>
        </member>
        <member name="M:Beta.Utils.Web.CacheHelper.RemoveCache(System.String)">
            <summary>
            根据键名清除缓存
            </summary>
            <param name="cacheKey">key名</param>
        </member>
        <member name="M:Beta.Utils.Web.CacheHelper.RemoveCacheByPrefix(System.String)">
            <summary>
            从缓存中去除前缀缓存名为参数的缓存
            </summary>
            <param name="prefixCacheKey">缓存名的前缀</param>
        </member>
        <member name="M:Beta.Utils.Web.CacheHelper.ReloadCache(System.String,System.Object,System.Object,Beta.Utils.Caching.Cache,System.DateTime,Beta.Utils.Caching.CacheExpireModeEnum,Beta.Utils.Caching.CacheItemRemovedHandler)">
            <summary>
            缓存更新的调度机制
            </summary>
            <param name="key">键名</param>
            <param name="initValue">原来的数据</param>
            <param name="loadedValue">更新后的数据</param>
            <param name="cache">缓存对象</param>
            <param name="expire">更新时间</param>
            <param name="reason">缓存对象超时模式枚举</param>
            <param name="cacheReloadEvent">cache重载回调</param>
        </member>
        <member name="M:Beta.Utils.Web.CacheHelper.SetCacheRefreshAfterLoad(System.String,System.Object,Beta.Utils.Caching.Cache,System.DateTime,Beta.Utils.Caching.CacheItemRemovedHandler)">
            <summary>
            正常更新机制
            </summary>
            <param name="key">键名</param>
            <param name="value">值</param>
            <param name="cache">缓存</param>
            <param name="expire">过期时间</param>
            <param name="cacheRemoveEvent">缓存删除回调事件</param>
        </member>
        <member name="M:Beta.Utils.Web.CacheHelper.SetCacheRefreshWhenFail(System.String,System.Object,Beta.Utils.Caching.Cache,Beta.Utils.Caching.CacheItemRemovedHandler)">
            <summary>
            异常更新机制
            </summary>
            <param name="key">键名</param>
            <param name="value">值</param>
            <param name="cache">缓存</param>
            <param name="cacheRemoveEvent">缓存删除回调事件</param>
        </member>
        <member name="M:Beta.Utils.Web.CacheHelper.ReloadCacheWithoutRemoveFunc(System.String,System.Object,System.Object,Beta.Utils.Caching.Cache,System.DateTime)">
            <summary>
            不带缓存更新函数的调度机制
            </summary>
            <param name="key">键名</param>
            <param name="initValue">原来的数据</param>
            <param name="loadedValue">更新后的数据</param>
            <param name="cache">缓存对象</param>
            <param name="expire">更新时间</param>
        </member>
        <member name="T:Beta.Utils.SecurityHelper">
            <summary>
            安全处理类
            </summary>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.ReplaceSQL(System.String)">
            <summary>
            防止SQL注入,替换SQL敏感字符
            </summary>
            <param name="inputString">SQL字符串</param>
            <returns>替换SQL敏感字符后的值</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.FilterInvlidContents(System.String)">
            <summary>
            从输入文本中获取字符串，需要检查输入的有效性
            </summary>
            <param name="contents">输入文本</param>
            <returns>检查处理后的文本</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.FilterInvlidContents(System.String,System.Int32)">
            <summary>
            从输入文本中获取字符串，需要检查输入的有效性
            </summary>
            <param name="contents">输入文本</param>
            <param name="maxLength">文本的长度</param>
            <returns>检查处理后的文本</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.EncryptData(System.String)">
            <summary>
            加密函数,根据密钥把字符串加密成流
            </summary>
            <param name="needEncryptString">需要加密的内容</param>
            <returns>密文</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.DecrypData(System.String)">
            <summary>
            解密函数，读取加密后的字符，根据密钥把密文还原成字符串
            </summary>
            <param name="needDecryString">密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.AESEncryptString(System.String)">
            <summary>
            Encrpyts the sourceString, returns this result as an Aes encrpyted, BASE64 encoded string
            </summary>
            <param name="plainSourceStringToEncrypt">a plain, Framework string (ASCII, null terminated)</param>
            <returns>
            returns an Aes encrypted, BASE64 encoded string
            </returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.AESEncryptString(System.String,System.String)">
            <summary>
            Encrpyts the sourceString, returns this result as an Aes encrpyted, BASE64 encoded string
            </summary>
            <param name="plainSourceStringToEncrypt">a plain, Framework string (ASCII, null terminated)</param>
            <param name="passPhrase">The pass phrase.</param>
            <returns>
            returns an Aes encrypted, BASE64 encoded string
            </returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.AESEncryptHexStringWithDefaultKey(System.String)">
            <summary>
            输出十六进制加密串
            </summary>
            <param name="plainSourceStringToEncrypt"></param>
            <param name="passPhrase"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.AESEncryptHexString(System.String,System.String)">
            <summary>
            输出十六进制加密串
            </summary>
            <param name="plainSourceStringToEncrypt"></param>
            <param name="passPhrase"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.AESDecryptString(System.String)">
            <summary>
            Decrypts a BASE64 encoded string of encrypted data, returns a plain string
            </summary>
            <param name="base64StringToDecrypt">an Aes encrypted AND base64 encoded string</param>
            <returns>returns a plain string</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.AESDecryptString(System.String,System.String)">
            <summary>
            Decrypts a BASE64 encoded string of encrypted data, returns a plain string
            </summary>
            <param name="base64StringToDecrypt">an Aes encrypted AND base64 encoded string</param>
            <param name="passphrase">The passphrase.</param>
            <returns>returns a plain string</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.AESDecryptHexStringWithDefaultKey(System.String)">
            <summary>
            传入十六进制加密串
            </summary>
            <param name="hexStringToDecrypt"></param>
            <param name="passphrase"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.AESDecryptHexString(System.String,System.String)">
            <summary>
            传入十六进制加密串
            </summary>
            <param name="hexStringToDecrypt"></param>
            <param name="passphrase"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.AESEncryptHexForUnion(System.String)">
            <summary>
            输出十六进制加密串
            </summary>
            <param name="plainSourceStringToEncrypt"></param>
            <param name="passPhrase"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.AESDecryptHexForUnion(System.String)">
            <summary>
            传入十六进制加密串
            </summary>
            <param name="hexStringToDecrypt"></param>
            <param name="passphrase"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.AESEncryptBase64ForUnion(System.String)">
            <summary>
            输出Base64加密串
            </summary>
            <param name="plainSourceStringToEncrypt">a plain, Framework string (ASCII, null terminated)</param>
            <returns>
            returns an Aes encrypted, BASE64 encoded string
            </returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.AESDecryptBase64ForUnion(System.String)">
            <summary>
            Decrypts a BASE64 encoded string of encrypted data, returns a plain string
            </summary>
            <param name="base64StringToDecrypt">an Aes encrypted AND base64 encoded string</param>
            <returns>returns a plain string</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.DESEncrypt(System.String)">
            <summary>
            加密方法
            </summary>
            <param name="dataToEncrypt">明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.DESEncrypt(System.String,System.String)">
            <summary>
            加密方法
            </summary>
            <param name="dataToEncrypt">明文</param>
            <param name="keys">密钥</param>
            <returns>密文（16进制编码）</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.DESEncrypt2Base64(System.String,System.String)">
            <summary>
            加密并base64编码
            </summary>
            <param name="dataToEncrypt">明文</param>
            <param name="keys">密钥</param>
            <returns>密文（base64进制编码）</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.DESEncrypt(System.Byte[],System.String)">
            <summary>
            加密方法
            </summary>
            <param name="dataToEncrypt">明文</param>
            <param name="keys">密钥</param>
            <returns>密文</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.DESDecrypt(System.String)">
            <summary>
            解密方法
            </summary>
            <param name="dataToDecrypt">密文</param>
            <returns>明文（16进制编码）</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.DESDecrypt(System.String,System.String)">
            <summary>
            解密方法
            </summary>
            <param name="dataToDecrypt">密文</param>
            <param name="keys">密匙</param>
            <returns>明文（16进制编码）</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.DESDecrypt4Base64(System.String,System.String)">
            <summary>
            解密方法
            </summary>
            <param name="dataToDecrypt">密文Base64</param>
            <param name="keys">密匙</param>
            <returns>明文</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.DESDecrypt(System.Byte[],System.String)">
            <summary>
            解密方法
            </summary>
            <param name="dataToDecrypt">密文</param>
            <param name="keys">密匙</param>
            <returns>明文</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.MD5Encode(System.String)">
            <summary>
            MD5加密（采用系统的MD5实现方法，本方法简单封装）
            </summary>
            <param name="dataToEncrypt">明文</param>
            <returns>MD5加密算法加密后的密文</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.MD5Encode(System.String,System.Int32)">
            <summary>
            MD5加密（采用系统的MD5实现方法，本方法简单封装）
            </summary>
            <param name="dataToEncrypt">明文</param>
            <param name="bitCount">字节位数，目前支持32和16两种，非32和16，系统将默认指定为32位</param>
            <returns>MD5加密算法加密后的密文</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.EncryptToSHA1(System.String)">
            <summary>
            SHA1加密（采用系统的SHA1实现方法，本方法简单封装）
            </summary>
            <param name="dataToEncrypt">明文</param>
            <returns>SHA1加密算法加密后的密文</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.CalcShortSha1InBASE32(System.String)">
            <summary>
            计算字符串的Sha1值(base32,长度为32位)
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.CalcShortSha1InBASE32InLowerCase(System.String)">
            <summary>
            计算字符串的Sha1值(base32,长度为32位)
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.CalcFileSha1InBASE32(System.String)">
            <summary>
            计算文件的Sha1值(base32,长度为32位)
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.CalcFileSha1InBASE32InLowerCase(System.String)">
            <summary>
            计算文件的Sha1值(base32,长度为32位)
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.CalcShortSha1InBASE32(System.Byte[])">
            <summary>
            计算Sha1(base32,长度为32位)
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.CalcShortSha1InBASE32InLowerCase(System.Byte[])">
            <summary>
            计算Sha1(base32,长度为32位)
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.ByteArrayToHexString(System.Byte[])">
            <summary>
            将字节数组转换成十六进制字符串
            </summary>
            <param name="buffer">字节数组</param>
            <returns>密文</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.HexStringToByteArray(System.String)">
            <summary>
            将十六进制字符串转换成字节数组
            </summary>
            <param name="hexString">十六进制字符串</param>
            <returns>字节数组格式的密文</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.ExportKeyXml(System.String,System.String)">
            <summary>
            生成公钥和私钥信息
            </summary>
            <param name="publicKeyXmlFilePath">公钥xml文件地址</param>
            <param name="privateKeyXmlFilePath">私钥xml文件地址</param>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.RSAEncrypt(System.String)">
            <summary>
            RSA加密方法（默认使用系统提供的私钥加密）
            </summary>
            <param name="dataToEncrypt">明文</param>
            <returns>RSA加密算法加密后的密文</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.RSAEncrypt(System.String,System.String)">
            <summary>
            RSA加密方法
            </summary>
            <param name="dataToEncrypt">明文</param>
            <param name="publicKey">公钥</param>
            <returns>RSA加密算法加密后的密文</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.RSADecrypt(System.String)">
            <summary>
            RSA解密方法（默认使用系统提供的私钥解密）
            </summary>
            <param name="dataToDecrypt">密文</param>
            <returns>RSA解密算法解密后的明文</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.RSADecrypt(System.String,System.String)">
            <summary>
            RSA解密方法
            </summary>
            <param name="dataToDecrypt">密文</param>
            <param name="privateKey">私钥</param>
            <returns>RSA解密算法解密后的明文</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.RSAEncrypt(System.Byte[],System.Security.Cryptography.RSAParameters,System.Boolean)">
            <summary>
            私有RSA加密方法
            </summary>
            <param name="dataToEncrypt">明文</param>
            <param name="RSAKeyInfo">RSA参数</param>
            <param name="isOAEPPadding">是否是OAEP方式</param>
            <returns>RSA加密算法加密后的密文</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.RSADecrypt(System.Byte[],System.Security.Cryptography.RSAParameters,System.Boolean)">
            <summary>
            私有RSA解密方法
            </summary>
            <param name="dataToDecrypt">密文</param>
            <param name="RSAKeyInfo">RSA参数</param>
            <param name="isOAEPPadding">是否是OAEP方式</param>
            <returns>RSA解密算法解密后的明文</returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.GetSecureUnionCodeForInt64(System.Int64,System.Boolean)">
            <summary>
            将64位整数转换为不可枚举的可安全传输的字符串
            </summary>
            <param name="unsecureUnionCode"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.GetUnsecureUnionCodeForInt64(System.String)">
            <summary>
            将不可枚举的可安全传输的字符串转换为64位整数
            </summary>
            <param name="secureUnionCode"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.GetSecureUnionCodeForInt32(System.Int32)">
            <summary>
            将32位整数转换为不可枚举的可安全传输的字符串
            </summary>
            <param name="unsecureUnionCode"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.GetUnsecureUnionCodeForInt32(System.String)">
            <summary>
            将不可枚举的可安全传输的字符串转换为32位整数
            </summary>
            <param name="secureUnionCode"></param>
            <returns></returns>
        </member>
        <member name="T:Beta.Utils.SecurityHelper.EncryptKey">
            <summary>
            加密密钥和算法设置
            </summary>
        </member>
        <member name="P:Beta.Utils.SecurityHelper.EncryptKey.Secret">
            <summary>
            默认对称加密算法密钥（优先使用动态密钥，没有动态密钥则使用此密钥）
            </summary>
        </member>
        <member name="P:Beta.Utils.SecurityHelper.EncryptKey.Disable">
            <summary>
            禁用
            </summary>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.TryGetEncryptKey(Beta.Utils.BetaCryptoType,System.Int32,Beta.Utils.SecurityHelper.EncryptKey@)">
            <summary>
            获取一个版本的加解密Key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.DecryptSecret(System.String,Beta.Utils.SecurityHelper.EncryptKey)">
            <summary>
            用RSA解密对称密钥
            </summary>
            <param name="dynamicSecret"></param>
            <param name="decryptHeader"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.TryGetEncryptKeyVersion(Beta.Utils.BetaCryptoType,System.String,System.UInt16@)">
            <summary>
            通过类型和命称检索加密密钥
            </summary>
            <param name="type">加密方法类型</param>
            <param name="versionAlias">加密版本命称</param>
            <param name="v">加密密钥版本号</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.Decrypt(System.String,Beta.Utils.BetaEncryptParameter@,System.String@)">
            <summary>
            动态密钥加解密（不签名）
            </summary>
            <param name="encryptData"></param>
            <param name="bep"></param>
            <param name="decryptData"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.Decrypt(System.String,System.String,System.String,System.Int64,Beta.Utils.BetaEncryptParameter@,System.String@)">
            <summary>
            动态密钥加解密（含签名）
            </summary>
            <param name="encryptData">密文</param>
            <param name="nonce">随机字符</param>
            <param name="sign">签名</param>
            <param name="timestamp">时间戳</param>
            <param name="bep">提取的加密参数</param>
            <param name="decryptData">明文</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.Encrypt(System.String,Beta.Utils.BetaEncryptParameter,System.String@,System.Int64@,System.String@,System.String@)">
            <summary>
            动态密钥加密（含签名）
            </summary>
            <param name="data">明文</param>
            <param name="bep">加密参数</param>
            <param name="nonce">随机字符</param>
            <param name="timestamp">时间戳</param>
            <param name="encryptData">密文</param>
            <param name="sign">签名</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.Encrypt(System.String,Beta.Utils.BetaEncryptParameter,System.String@,System.String@)">
            <summary>
            动态密钥加密（不含签名）
            </summary>
            <param name="data"></param>
            <param name="bep"></param>
            <param name="encryptData"></param>
            <param name="sign"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.Encrypt(Beta.Utils.BetaCryptoType,System.String,System.String@)">
            <summary>
            默认密钥加密
            </summary>
            <param name="data"></param>
            <param name="encryptData"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.Encrypt(Beta.Utils.BetaCryptoType,System.String,System.String,System.String@)">
            <summary>
            指定密钥版本简称
            </summary>
            <param name="type"></param>
            <param name="alias">密钥简称</param>
            <param name="data"></param>
            <param name="encryptData"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.VerifySign(System.String,System.String[])">
            <summary>
            验签
            </summary>
            <param name="sign"></param>
            <param name="strParams"></param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.SecurityHelper.ParseCryptoHeader(System.String,Beta.Utils.BetaEncryptParameter@,System.Byte[]@)">
            <summary>
            解出加密头部
            </summary>
            <param name="inStr"></param>
            <param name="pm"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="T:Beta.Utils.BetaEncryptParameter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Beta.Utils.BetaEncryptParameter.CryptType">
            <summary>
            加密类型
            </summary>
        </member>
        <member name="P:Beta.Utils.BetaEncryptParameter.KeyVersion">
            <summary>
            密钥类型
            </summary>
        </member>
        <member name="P:Beta.Utils.BetaEncryptParameter.EncType">
            <summary>
            编码类型
            </summary>
        </member>
        <member name="P:Beta.Utils.BetaEncryptParameter.SignType">
            <summary>
            签名类型
            </summary>
        </member>
        <member name="P:Beta.Utils.BetaEncryptParameter.DynamicSecret">
            <summary>
            AesByRsa加密时的动态密钥
            </summary>
        </member>
        <member name="P:Beta.Utils.BetaEncryptParameter.AttachDynamicSecret">
            <summary>
            加密时，是否附加动态密钥到密文（默认否，因为APP端产生动态密钥，并保持与会话相关，可以直接解密）
            </summary>
        </member>
        <member name="T:Beta.Utils.BetaCryptoType">
            <summary>
            加密方法
            </summary>
        </member>
        <member name="F:Beta.Utils.BetaCryptoType.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Beta.Utils.BetaCryptoType.AES">
            <summary>
            AES对称加密
            </summary>
        </member>
        <member name="F:Beta.Utils.BetaCryptoType.RSA">
            <summary>
            RSA非对称加密
            </summary>
        </member>
        <member name="F:Beta.Utils.BetaCryptoType.AESByRSA">
            <summary>
            RSA+AES动态密钥加密
            </summary>
        </member>
        <member name="T:Beta.Utils.BetaEncodingType">
            <summary>
            表示格式
            </summary>
        </member>
        <member name="F:Beta.Utils.BetaEncodingType.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Beta.Utils.BetaEncodingType.Base64">
            <summary>
            Base64
            </summary>
        </member>
        <member name="F:Beta.Utils.BetaEncodingType.Base16">
            <summary>
            16进制
            </summary>
        </member>
        <member name="F:Beta.Utils.BetaEncodingType.Base32">
            <summary>
            Base32
            </summary>
        </member>
        <member name="T:Beta.Utils.BetaSignType">
            <summary>
            签名类型
            </summary>
        </member>
        <member name="F:Beta.Utils.BetaSignType.NoSign">
            <summary>
            不签名
            </summary>
        </member>
        <member name="F:Beta.Utils.BetaSignType.SignVer1">
            <summary>
            Sha1 签名
            </summary>
        </member>
        <member name="T:Beta.Utils.DesForDelphi">
            <summary>
            跟Delphi写的DES算法通用
            </summary>
        </member>
        <member name="T:Beta.Utils.WinEnvironmentHelper">
            <summary>
            环境处理，提供WinFrom有关环境的属性和处理方法
            </summary>
        </member>
        <member name="P:Beta.Utils.WinEnvironmentHelper.CpuID">
            <summary>
            获取CPUID
            </summary>
        </member>
        <member name="P:Beta.Utils.WinEnvironmentHelper.MacAddress">
            <summary>
            获取MAC地址
            </summary>
        </member>
        <member name="P:Beta.Utils.WinEnvironmentHelper.IPAddress">
            <summary>
            获取真实IP
            </summary>
        </member>
        <member name="P:Beta.Utils.WinEnvironmentHelper.DiskID">
            <summary>
            获取DiskID
            </summary>
        </member>
        <member name="P:Beta.Utils.WinEnvironmentHelper.SystemUserName">
            <summary> 
            操作系统的登录用户名 
            </summary> 
            <returns></returns> 
        </member>
        <member name="P:Beta.Utils.WinEnvironmentHelper.SystemType">
            <summary> 
            PC类型 
            </summary> 
            <returns></returns> 
        </member>
        <member name="P:Beta.Utils.WinEnvironmentHelper.TotalPhysicalMemory">
            <summary> 
            物理内存 
            </summary> 
            <returns></returns> 
        </member>
        <member name="P:Beta.Utils.WinEnvironmentHelper.ComputerName">
            <summary> 
             获取计算机名称
            </summary> 
            <returns></returns> 
        </member>
        <member name="T:Beta.Utils.XmlHelper">
            <summary>
            XML处理类
            </summary>
        </member>
        <member name="F:Beta.Utils.XmlHelper._xmlFileName">
            <summary>
            xml文件名
            </summary>
        </member>
        <member name="F:Beta.Utils.XmlHelper._objXmlDoc">
            <summary>
            XmlDocument
            </summary>
        </member>
        <member name="T:Beta.Utils.XmlHelper.XmlLoadType">
            <summary>
            构造函数的参数类型
            </summary>
        </member>
        <member name="T:Beta.Utils.XmlHelper.Parameter">
            <summary>
            参数
            </summary>
        </member>
        <member name="M:Beta.Utils.XmlHelper.#ctor(System.String)">
            <summary>
            类构造函数
            </summary>
            <param name="xmlFileName">XML文件路径及文件名</param>
        </member>
        <member name="M:Beta.Utils.XmlHelper.#ctor(System.String,Beta.Utils.XmlHelper.XmlLoadType)">
            <summary>
            类构造函数
            </summary>
            <param name="xmlFile">XML文件路径及文件名或者是内容字符串</param>
            <param name="xmlLoadType">xmlFile的参数类型</param>
        </member>
        <member name="M:Beta.Utils.XmlHelper.GetNodeData(System.String)">
            <summary>
            查找数据
            </summary>
            <param name="xmlPathNode">目标节点</param>
            <returns>以表格形式返回节点下的内容</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.GetNodeAttribute(System.String,System.String)">
            <summary>
            根据节点，取属性值
            </summary>
            <param name="node">节点</param>
            <param name="attribute">属性名称</param>
            <returns>xml节点的属性值，如果不存在该节点和属性，则返回空</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.GetXmlNode(System.String)">
            <summary>
            根据xml的节点名返回节点
            </summary>
            <param name="xmlNodeName">节点名</param>
            <returns>xml的节点</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.GetXmlNodes(System.String)">
            <summary>
            根据xml的节点名返回节点列表
            </summary>
            <param name="xmlNodeName">节点名</param>
            <returns>某个名称的所有节点</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.Replace(System.String,System.String)">
            <summary>
            更新节点内容
            </summary>
            <param name="xmlPathNode">目标节点</param>
            <param name="content">需要更新的内容</param>
        </member>
        <member name="M:Beta.Utils.XmlHelper.Delete(System.String)">
            <summary>
            删除一个节点
            </summary>
            <param name="xmlNodeName">目标节点</param>
        </member>
        <member name="M:Beta.Utils.XmlHelper.InsertNode(System.String,System.String,System.String,System.String)">
            <summary>
            插入一节点和此节点的一子节点。
            </summary>
            <param name="mainNode">目标节点</param>
            <param name="childNode">需要插入的子节点</param>
            <param name="element">需要插入的子节点的属性</param>
            <param name="content">需要插入的子节点的属性值</param>
        </member>
        <member name="M:Beta.Utils.XmlHelper.InsertElement(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            插入一个带属性的节点
            </summary>
            <param name="mainNode">目标节点</param>
            <param name="element">需插入的元素</param>
            <param name="attribName">属性名</param>
            <param name="attribContent">属性内容</param>
            <param name="content">元素内容</param>
        </member>
        <member name="M:Beta.Utils.XmlHelper.InsertElement(System.String,System.String,System.String)">
            <summary>
            插入一个节点，不带属性
            </summary>
            <param name="mainNode">目标节点</param>
            <param name="element">需插入的元素</param>
            <param name="content">内容</param>
        </member>
        <member name="M:Beta.Utils.XmlHelper.Save">
            <summary>
            保存XML文档
            </summary>
        </member>
        <member name="M:Beta.Utils.XmlHelper.Save(System.String)">
            <summary>
            保存XML文档
            </summary>
            <param name="xmlFileName">Xml文档的保存地址</param>
        </member>
        <member name="M:Beta.Utils.XmlHelper.FilterInvalidContent(System.String)">
            <summary>
            过滤无效字符
            </summary>
            <param name="replaceString">需要替换的内容</param>
            <returns>过滤无效字符后的值</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.GetDataTable(System.IO.Stream)">
            <summary>
            将xml文件流格式化成DataTable
            </summary>
            <param name="stream">xml文件</param>
            <returns>DataTable格式数据</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.GetDataTable(System.String)">
            <summary>
            将某个文件路径下的xml文件格式化成DataTable
            </summary>
            <param name="fileName">文件名</param>
            <returns>DataTable格式数据</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.GetDataTable(System.IO.TextReader)">
            <summary>
            将textReader对象格式化成DataTable
            </summary>
            <param name="textReader">TextReader对象</param>
            <returns>DataTable格式数据</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.GetDataTable(System.Xml.XmlReader)">
            <summary>
            将xmlReader对象格式化成DataTable
            </summary>
            <param name="xmlReader">XmlReader对象</param>
            <returns>DataTable格式数据</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.GetDataSet(System.IO.Stream)">
            <summary>
            将xml文件流格式化成DataSet
            </summary>
            <param name="stream">xml文件流</param>
            <returns>DataSet格式数据</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.GetDataSet(System.IO.Stream,System.Data.XmlReadMode)">
            <summary>
            将xml文件流按照一定的模式格式化成DataSet
            </summary>
            <param name="stream">xml文件流</param>
            <param name="xmlReadMode">XmlReadMode</param>
            <returns>DataSet格式数据</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.GetDataSet(System.String)">
            <summary>
            将xml文件格式化成DataSet
            </summary>
            <param name="fileName">xml文件名</param>
            <returns>DataSet格式数据</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.GetDataSet(System.String,System.Data.XmlReadMode)">
            <summary>
            将xml文件按照一定的模式格式化成DataSet
            </summary>
            <param name="fileName">xml文件名</param>
            <param name="xmlReadMode">XmlReadMode</param>
            <returns>DataSet格式数据</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.GetDataSet(System.IO.TextReader)">
            <summary>
            将textReader对象格式化成DataSet
            </summary>
            <param name="textReader">TextReader对象</param>
            <returns>DataSet格式数据</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.GetDataSet(System.Xml.XmlReader)">
            <summary>
            将XmlReader对象格式化成DataSet
            </summary>
            <param name="xmlReader">XmlReader对象</param>
            <returns>DataSet格式数据</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.GetXmlNodeAttributeValue(System.Xml.XmlNode,System.String)">
            <summary>
            获取当前节点的指定名称的属性的字符串值。如果未找到指定名称的属性，返回空字符串；否则返回该属性的Trim后的Value。
            </summary>
            <param name="node">当前节点</param>
            <param name="attributeName">属性的名称</param>
            <returns>匹配的属性的值</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.GetXmlSingleChildNodeValue(System.Xml.XmlNode,System.String)">
            <summary>
            获取当前节点的指定名称的子节点的字符串值。如果未找到指定名称的子节点，返回空字符串；否则返回该子节点的Trim后的InnerText。
            </summary>
            <param name="node">当前节点</param>
            <param name="childNodeName">子节点的名称</param>
            <returns>匹配的子节点的值</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.Serializer(System.Object)">
            <summary>
            序列化对象到内存流
            </summary>
            <param name="obj">实例化的对象</param>
            <returns>对象的内存流</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.Deserialize``1(System.IO.MemoryStream)">
            <summary>
            将内存流反序列化成对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="memoryStream">内存流</param>
            <returns>对象</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.Serializer``1(System.String,``0)">
            <summary>
            序列化对象并将内容输出xml文件
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="fileName">序列化后的xml文件路径文件名，形如：C:\test.xml</param>
            <param name="obj">需要序列化的对象</param>
        </member>
        <member name="M:Beta.Utils.XmlHelper.Deserialize``1(System.String)">
            <summary>
            将xml文件的内容反序列化成对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="fileName">xml文件路径文件名，形如：C:\test.xml</param>
            <returns>对象</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.SerializerToString(System.Object)">
            <summary>
            序列化对象成字符串
            </summary>
            <param name="obj">实例化的对象</param>
            <returns>字符串格式的对象</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.DeserializeFromString``1(System.String)">
            <summary>
            将字符串反序列化成对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="contents">对象序列化后的Xml字符串</param>
            <returns>对象值</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.XmlSerialize(System.Object,System.Text.Encoding)">
            <summary>
            将一个对象序列化为XML字符串
            </summary>
            <param name="obj">要序列化的对象</param>
            <param name="encoding">编码方式</param>
            <returns>序列化产生的XML字符串</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Beta.Utils.XmlHelper.XmlDeserialize``1(System.String,System.Text.Encoding)" -->
        <member name="M:Beta.Utils.XmlHelper.ConvertXSLT(System.String,System.String)">
            <summary>
            XSLT转换
            </summary>
            <param name="xmlFilePath">xml路径</param>
            <param name="xsltFilePath">xslt路径</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:Beta.Utils.XmlHelper.ConvertXSLT(System.String,System.String,System.Boolean)">
            <summary>
            XSLT转换
            </summary>
            <param name="xmlFilePath">xml路径</param>
            <param name="xsltFilePath">xslt路径</param>
            <param name="isCacheXSLT">是否启用缓存,黙认不启用</param>
            <returns>转换后的值(文件不存在则抛出异常)</returns>
        </member>
        <member name="T:Beta.Utils.IniHelper">
            <summary>
            XML处理类
            </summary>
        </member>
        <member name="M:Beta.Utils.IniHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="INIPath">文件路径</param>
        </member>
        <member name="M:Beta.Utils.IniHelper.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            写INI文件
            </summary>
            <param name="Section">段落</param>
            <param name="Key">键名</param>
            <param name="Value">键值</param>
        </member>
        <member name="M:Beta.Utils.IniHelper.IniReadValue(System.String,System.String)">
            <summary>
            读取INI文件
            </summary>
            <param name="Section">段落</param>
            <param name="Key">键名</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.IniHelper.IniReadValues(System.String,System.String)">
            <summary>
            读取INI文件
            </summary>
            <param name="Section">段落</param>
            <param name="Key">键名</param>
            <returns></returns>
        </member>
        <member name="M:Beta.Utils.IniHelper.ClearAllSection">
            <summary>
            删除ini文件下所有段落
            </summary>
        </member>
        <member name="M:Beta.Utils.IniHelper.ClearSection(System.String)">
            <summary>
            删除ini文件下某段落下的所有键
            </summary>
            <param name="Section">段落</param>
        </member>
    </members>
</doc>
